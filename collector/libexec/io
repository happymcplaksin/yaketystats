#!/usr/bin/env perl

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$|=1;
use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

my (@data, $line);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "GAUGE";
my $rrd_interval;

our ($g_os, $g_default_timeout, $g_host, $g_sep, $g_collector, %g_ignores,
     $pvlv, $which_stats, $keep_zeros);
$main::g_host = get_hostname ();
$main::g_collector = 'io';
default_plugin_opts ();

# PV/PV options:
# - pv is just PVs (ignore ^dm- and ^md)
# - pvlv is PVs and LVs (ignore nothing)
# Stat options:
# - default is tps, readsec/s, writesec/s (just like 2.0)
# - all is all
# Use your ignore file if you want finer-grained config

$pvlv = 'pv';
$which_stats = 'base3';
# Linux-only "Technology Preview" for 2.1
$keep_zeros = 0;
if ( basename ($0) eq 'io_pvlv' ) {
  $pvlv = 'pvlv';
}
if ( basename ($0) eq 'io_all' ) {
  $pvlv = 'pvlv';
  $which_stats = 'all';
}

# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if ( !@ARGV || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  $rrd_interval = 300;
  fileit ("You ran $g_collector manually; setting interval to $rrd_interval.");
  @data = doit ();
  foreach my $line (@data) {
    print "$line";
  }
  print "\n";
} else {
  if ( defined ($ARGV[0]) && $ARGV[0] =~ /^\d+$/ ) {
    $rrd_interval = $ARGV[0];
  } else {
    fileit ("Ack!  No interval for $g_collector.  Bailing.", "err");
    exit ();
  }
  get_ignores ();
  @data = doit ();
  if ( defined ($data[0]) ) {
    bivalve (@data);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }
}

sub doit {
  my ($cmd, $status, @data, $line, @return, $time);

  # For Linux,
  if ( $g_os eq "linux" ) {
    @return = linux ();
  }
  # HP-UX
  if ( $g_os eq "hpux" ) {
    @return = hpux ();
  }
  # Solaris
  if ( $g_os eq "solaris" ) {
    @return = solaris ();
  }
  return (@return);
}

## - Get full list of HP-UX disks with "vgdisplay -v | grep 'PV Name'".
## - No mapping is needed
## - Get stats via 'sar -d 5'
sub hpux {
  my ($cmd, $time, $status, @data, $line, $pv, %stats, $busy, $avque, $rw, $blks,
      $avwait, $avserv, $var, $value, @return);

  $time = time ();

  # First, get all PVs
  $cmd = 'vgdisplay -v';
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    return (undef);
  }
  foreach $line (@data) {
    if ( $line =~ /PV Name/ ) {
      chomp ($line);
      $pv = (split (/\s+/, $line))[3];
      # Drop /dev/dsk/
      $pv = (split (/\//, $pv))[3];
      $stats{$pv}{'name'} = $pv;
    }
  }

  # Then get data from sar
  $cmd = 'sar -d 5';
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    return (undef);
  }
  ##  0            1       2       3        4       5      6       7
  ## 08:41:46   device   %busy   avque   r+w/s  blks/s  avwait  avserv
  ## 08:41:51   c6t6d0   14.82    2.33      28     232   14.62   22.33
  ##            c9t6d0   12.65    2.38      25     218   12.79   20.13
  foreach $line (@data) {
    if ( $line =~ /c[0-9]+t[0-9]+d[0-9]+/ ) {
      chomp ($line);
      (undef, $pv, $busy, $avque, $rw, $blks, $avwait, $avserv) =
        split (/\s+/, $line);
      # TODO: There's a smarter way, I'm sure!  But maybe none that avoids eval.  Hmm.
      $stats{$pv}{'busy'}   = $busy;
      $stats{$pv}{'avque'}  = $avque;
      $stats{$pv}{'rw'}     = $rw;
      $stats{$pv}{'blks'}   = $blks;
      $stats{$pv}{'avwait'} = $avwait;
      $stats{$pv}{'avserv'} = $avserv;
      $stats{$pv}{'busy'}   = $busy;
      $stats{$pv}{'busy'}   = $busy;
      $stats{$pv}{'busy'}   = $busy;
    }
  }

  # Now loop through every PV and print the data (or 0 for no data)
 LOOP: foreach $pv (keys (%stats)) {
    if ( ignoreit ('io', $pv) ) {
      next LOOP;
    }
    foreach $var ('busy','avque','rw','blks','avwait','avserv') {
      if ( defined ($stats{$pv}{$var}) ) {
        $value = $stats{$pv}{$var};
      } else {
        $value = 0;
      }
      push (@return,
            "p=/$main::g_host/io/$var/$pv${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$value\n");
    }
  }
  return (@return);
}

sub solaris {
  my ($cmd, $time, $status, @data, $line, $pv, %stats, $busy, $avque, $rw, $blks,
      $avwait, $avserv, $var, $value, @return, $short, $long, %short2long,
      $the_tness);

  $time = time ();

  # Snarf /etc/path_to_inst
  if ( ! open (F, "/etc/path_to_inst") ) {
    fileit ("Bad status for open /etc/path_to_inst: $!");
    return (undef);
  }
  my (%links, $ctd, $link, $instance, $driver);
  while ( <F> ) {
    $line = $_;
    if ( $line !~ /^#/ ) {
      chomp ($line);
      ($link, $instance, $driver) = split (/\s+/, $line);
      #print "line = $line, inst=$instance, drv=$driver.\n";
      $link =~ s/"//g;
      $driver =~ s/"//g;
      $link =~ s/^\///;
      if ( defined ($driver) && defined ($instance) ) {
	#print "recording $link = $driver $instance.\n";
	$links{$link} = "${driver}${instance}";
      }
    }
  }
  close (F);

  $cmd = 'ls -l /dev/dsk';
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    return (undef);
  }
  foreach $line (@data) {
    if ( $line !~ /^total/ ) {
      ($ctd, $link) = (split (/\s+/, $line))[8,10];
      #print "line = $line, ctd = $ctd, link = $link.\n";
      $link =~ s/[.][.]\/[.][.]\/devices\///g;
      $link =~ s/:.*//g;
      if ( defined ($links{$link}) ) {
	# drop slice
	$ctd =~ s/s.*//;
	#print "Hey, found short name for $ctd (link = $link): $links{$link}.\n";
	$short2long{$links{$link}} = $ctd;
      } else {
	# Eh, assume these are OK.  For us they are only emcpower devices
	#print "Hey, I'm helpless about $ctd (link = $link).\n";
	;
      }
    }
  }

  # Then get data from sar
  $cmd = 'sar -d 5';
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    return (undef);
  }
  ##  0            1       2       3        4       5      6       7
  ## 08:41:46   device   %busy   avque   r+w/s  blks/s  avwait  avserv
  ## 08:41:51   sd1     14.82    2.33      28     232   14.62   22.33
  ##            sd2     12.65    2.38      25     218   12.79   20.13
  LOOP: foreach $line (@data) {
    if ( $line =~ /(sd|ssd|dad)/ &&
         $line !~ /,/ ) {
      chomp ($line);
      (undef, $pv, $busy, $avque, $rw, $blks, $avwait, $avserv) =
        split (/\s+/, $line);
      # Vive la difference!
      # When you're using MPXIO on Solaris (10 at least) and have multiple paths to a LUN
      # you get multiple lines for each LUN in your sar -d output.  For example:
      # $ sar -d 1 1 | grep ssd18
      #    ssd18.t1          0     0.0       0       0     0.0     0.0
      #    ssd18.t2          0     0.0       0       0     0.0     0.0
      #    ssd18             0     0.0       0       0     0.0     0.0
      undef ($the_tness);
      if ( $pv =~ /[.]t[0-9]*$/ ) {
	$the_tness = $pv;
	$the_tness =~ s/^[^.]*[.]//g;
	$pv =~ s/[.]$the_tness//;
      } else {
	if ( !defined ($pv) || !defined ($short2long{$pv}) ) {
	  if ( !ignoreit ('io', $pv) ) {
	    fileit ("Ack, sar data for a disk that isn't mapped: $pv.  Skipping.");
	  }
	  next LOOP;
	}
      }
      $pv = $short2long{$pv};
      if ( defined ($the_tness) ) {
	$pv = "${pv}.${the_tness}";
      }
      # TODO: There's a smarter way, I'm sure!
      $stats{$pv}{'busy'}   = $busy;
      $stats{$pv}{'avque'}  = $avque;
      $stats{$pv}{'rw'}     = $rw;
      $stats{$pv}{'blks'}   = $blks;
      $stats{$pv}{'avwait'} = $avwait;
      $stats{$pv}{'avserv'} = $avserv;
      $stats{$pv}{'busy'}   = $busy;
      $stats{$pv}{'busy'}   = $busy;
      $stats{$pv}{'busy'}   = $busy;
    }
  }

  # Now loop through every PV and print the data (or 0 for no data)
 LOOP: foreach $pv (keys (%stats)) {
    if ( ignoreit ('io', $pv) ) {
      next LOOP;
    }

    foreach $var ('busy','avque','rw','blks','avwait','avserv') {
      if ( defined ($stats{$pv}{$var}) ) {
        $value = $stats{$pv}{$var};
      } else {
        $value = 0;
      }
      push (@return,
            "p=/$main::g_host/io/$var/$pv${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$value\n");
    }
  }
  return (@return);
}

# Linux:
# - For dm mapping, grep device-mapper /proc/devices and record major number
# - ls -l /dev/mapper and grab minor numbers and names
# - iostat -x ALL -k'
# - As before, skip anything w/ all 0 (or 0.0)
# - Ignore all the lines that match ^ram (They're always 0 as far as I can see)
# - oops, and need plain iostat to get tps
#
# Ubuntu 8, RHEL5:
#           1     2      3    4   5    6     7          8      9     10    11
# Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await svctm %util
#
# Debian 3.1, RHEL4:
#           1     2      3    4   5      6     7      8      9     10        11     12    13
# Device: rrqm/s wrqm/s r/s w/s rsec/s wsec/s rkB/s wkB/s avgrq-sz avgqu-sz await svctm %util
#           Remove extry cols:  rsec/s wsec/s and it matches the others:
# Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await svctm %util
sub linux {
  my ($cmd, $time, $status, @data, $line, $dev, %s, $splice,
      @return, $major, $minor, $saw_device, %minor2dev, $skip, $i, @t,
      $hack);
  local *F;

  $time = time ();

  # Right now this is only for Linux
  if ( $pvlv eq 'pv' ) {
    push (@{ $g_ignores{'io'} }, '^dm');
    push (@{ $g_ignores{'io'} }, '^md');
  }
  if ( $which_stats ne 'all' ) {
    foreach $i qw(rrqm wrqm readreq writereq avgrq_sz avgqu_sz avwait svctm util) {
      push (@{ $g_ignores{'io'} }, $i);
    }
  }


  if ( ! open (F, "/proc/devices") ) {
    fileit ("Can't open /proc/devices: $!");
    return (undef);
  }
  while ( <F> ) {
    $line = $_;
    chomp ($line);
    if ( $line =~ /device-mapper/i ) {
      $major = (split(/\s+/, $line))[0];
    }
  }
  close (F);

  # Map minor to device name
  $cmd = 'ls -l /dev/mapper';
  ($status, @data) = run_prg ("$cmd",
			      $g_default_timeout, 1);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd: $status.  Output was:\n@data");
    return (undef);
  }
  foreach $line (@data) {
    chomp ($line);
    if ( $line =~ /${major},/ ) {
      ($minor, $dev) = (split (/\s+/, $line))[5, 9];
      $minor2dev{$minor} = $dev;
    }
  }

  # Ignore ram and loop devices by default
  push (@{ $g_ignores{'io'} }, "^ram");
  push (@{ $g_ignores{'io'} }, "^loop");
  push (@{ $g_ignores{'io'} }, "^fd");
  # The get data from iostat
  # This doesn't include tps
  #$cmd = 'iostat -x ALL 5 2';
  # So use this hilarious hack to get all the data for the same 5 seconds:
  $cmd = "(iostat -x ALL 5 2 2>&1 | sed 's/^/ALL /') & (iostat 5 2 2>&1 | sed 's/^/TPS /') &";
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    return (undef);
  }

  foreach $hack qw(ALL TPS) {
    $saw_device = 0;
  LOOP: foreach $line (@data) {
      undef (%s);
      chomp ($line);
      if ( $line !~ /^$hack / || $line =~ /^$hack $/ ) {
	next LOOP;
      }
      if ( $line =~ /^$hack Device:/ ) {
	$saw_device++;
	if ( $line =~ /rkB\/s wkB\/s/ ) {
	  $splice = 1;
	} else {
	  $splice = 0;
	}
	next LOOP;
      }
      if ( $saw_device == 2 ) {
	$line =~ s/^\w+ //;
	if ( $hack eq 'ALL' ) {
	  if ( $splice ) {
	    @t = splice (@{[(split (/\s+/, $line))]}, 7, 2);
	  } else {
	    @t = split (/\s+/, $line);
	  }
	  ($dev, $s{'rrqm'}, $s{'wrqm'}, $s{'readreq'}, $s{'writereq'}, $s{'read'},
	   $s{'write'}, $s{'avgrq_sz'}, $s{'avgqu_sz'}, $s{'avwait'}, $s{'svctm'},
	   $s{'util'}) = @t;
	} else {
	  ($dev, $s{'tps'}) = (split (/\s+/, $line))[0, 1];
	}
	# Sometimes you have this so turn / into .
	# cciss/c0d0       53.48       401.35       671.90 1672396137 2799715492
	# cciss/c0d0p1      0.00         0.03         0.01     127156      25308
	# cciss/c0d0p2    117.33       401.32       671.89 1672267429 2799681488
	$dev =~ s/\//./g;
	# Do the same with colons becasue they're special to rrdtool
	$dev =~ s/:/./g;
	if ( $dev eq '' || ignoreit ('io', $dev) ) {
	  next LOOP;
	}
	if ( $dev =~ /^dm-/ ) {
	  $minor = (split (/-/, $dev))[1];
	  $dev = $minor2dev{$minor};
	}

	# What's better?  To have a bunch of extra RRD files even if all
	# values are always 0 OR, to (effectively) put NAN into RRD files
	# for real disks when they have no activity?
	#
	# I say the latter but hey, we're flexible!  In 2.2 I'll
	# externalize $keep_zeros w/ an option.  But BEWARE: If I collect
	# all stats for every PV and LV on On my Ubuntu desktop with about
	# 5 filesystems in LVM on RAID1 I would have *121* RRD files just
	# for io.  800k * 121 = almost 100M!
	$skip = 0;
	if ( ! $keep_zeros ) {
	  foreach $i (keys (%s)) {
	    if (!defined ($s{$i}) || $s{$i} eq '0.00' ) {
	      $skip++;
	    }
	  }
	}
	if ( $skip != keys (%s) ) {
	  foreach $i (keys (%s)) {
	    if ( !ignoreit ('io', $i) ) {
	      # Sometimes (during high load?) we get bogus data so avoid that
	      if ( defined ($s{$i}) && $s{$i} =~ /^[.0-9]+$/ &&
		   # Rarely we get numbers like 259.2.00.  What's up with that?!?
		   # iostat bug or YS bug?  In any case it's rare so ignore it for now
		   $s{$i} !~ /[.].*[.]/ ) {
		push (@return,
		      "p=/$main::g_host/io/${i}/${dev}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$s{$i}\n");
	      }
	    }
	  }
	}
      }
    }
  }
  return (@return);
}
