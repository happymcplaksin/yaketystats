#!/usr/bin/env perl

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$|=1;
use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

my (@data);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "DERIVE";
my $rrd_interval;

our ($g_exit, $g_default_timeout, $g_host, $g_sep, $g_collector, $g_os);
$main::g_host = get_hostname ();
$g_collector = "interrupts";
default_plugin_opts ();

# PUT YOUR LOCAL VARIABLES HERE!

# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if ( !@ARGV || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  $rrd_interval = 60;
  fileit ("You ran $g_collector manually; setting interval to $rrd_interval.");
  @data = doit ();
  foreach my $line (@data) {
    print "$line";
  }
  print "\n";
} else {
  if ( defined ($ARGV[0]) && $ARGV[0] =~ /^\d+$/ ) {
    $rrd_interval = $ARGV[0];
  } else {
    fileit ("Ack!  No interval for $g_collector.  Bailing.", "err");
    exit ();
  }
  get_ignores ();
  @data = doit ();
  if ( defined ($data[0]) ) {
    bivalve (@data);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }
}

# /proc/stat: count of total interrupts, per cpu interrupts (or skip total?)
# /proc/interrupts: per-CPU counts (and total?) w/ appropriate labels
##############################################################################

# They look like this even if you have just one CPU.

# linux
# /proc/stat:
# cpu  5835670 100844 1716152 214981089 688547 38342 61209 0 0
# cpu0 2132266 40976 891314 105639771 68968 54 1712 0 0
# cpu1 3703404 59868 824837 109341317 619579 38288 59497 0 0
# intr 183184513 174 163186 0 0 12 0 3 1 3 0 0 0 4 0 11663702 6 1329656 155546228 8 45 3 8067171 46 6414265 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# ctxt 1038767553
# btime 1231773345
# processes 2102454
# procs_running 1
# procs_blocked 0
#
# ctxt = context switches
# intr = interrupts

# /proc/interrupts:
#            CPU0       CPU1       
#   0:        172          2   IO-APIC-edge      timer
#   1:        458     162728   IO-APIC-edge      i8042
#   4:          0         12   IO-APIC-edge    
#   6:          0          3   IO-APIC-edge      floppy
#   7:          1          0   IO-APIC-edge    
#   8:          0          3   IO-APIC-edge      rtc
#   9:          0          0   IO-APIC-fasteoi   acpi
#  12:          0          4   IO-APIC-edge      i8042
#  14:       9464   11655129   IO-APIC-edge      libata
#  15:          0          6   IO-APIC-edge      libata
#  16:       2021    1327705   IO-APIC-fasteoi   ohci_hcd:usb1, sata_nv
#  17:      95116  155473953   IO-APIC-fasteoi   eth0, NVidia CK804
#  18:          0          8   IO-APIC-fasteoi   ehci_hcd:usb2
#  19:          0         45   IO-APIC-fasteoi   ioc0
#  20:          0          3   IO-APIC-fasteoi   ohci1394
#  21:      28632    8038866   IO-APIC-fasteoi   sata_nv
#  22:          0         46   IO-APIC-fasteoi   ioc1
#  23:       6429    6407944   IO-APIC-fasteoi   nvidia
# NMI:          0          0   Non-maskable interrupts
# LOC:  258357855  159042870   Local timer interrupts
# RES:    8429488    4553905   Rescheduling interrupts
# CAL:       2064       1104   function call interrupts
# TLB:     441040     631498   TLB shootdowns
# TRM:          0          0   Thermal event interrupts
# SPU:          0          0   Spurious interrupts
# ERR:          1
# MIS:          0


sub doit {
  local *F;

  my ($line, $first, $cpu, $num, @cpucounts, $label, $count, @return,
      $cpus, $i, $name, $time);

  $time = time ();

  if ( $g_os ne "linux" ) {
    fileit ("$g_collector not supported on $g_os");
    return ();
  }

  # Read /proc/stat
  if ( ! open (F, "/proc/stat") ) {
    fileit ("Can't open /proc/stat!");
    return ();
  }
  while ( <F> ) {
    $line = $_;
    chomp ($line);
    if ( $line =~ /^intr/ ) {
      ($cpu, $count) = (split (/ /, $line))[0, 1];
      $cpu =~ s/cpu//;
      push (@return, "p=/$main::g_host/kernel/interrupts/count${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$count\n");
    }
    if ( $line =~ /^ctxt/ ) {
      $count = (split (/ /, $line))[1];
      push (@return, "p=/$main::g_host/kernel/contextswitch/count${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$count\n");
    }
  }
  close (F);

  # Read /proc/interrupts
  if ( ! open (F, "/proc/interrupts") ) {
    fileit ("Can't open /proc/interrupts!");
    return ();
  }
  $first = 1;
 LOOP:
  while ( <F> ) {
    $line = $_;
    chomp ($line);
    $line =~ s/^\s+//;
    if ( $first == 1 ) {
      # You love Perl or your hate it!
      $cpus++ while $line =~ /CPU[0-9]*/g;
       $first = 0;
    } else {
      ($num, $label, @cpucounts) = (split /\s+/, $line)[0, ${cpus}+2, 1..${cpus}];
      $num =~ s/://;
#      print "num=$num, label=$label, cpucounts = @cpucounts\n";
      # If it's numeric, name it $label-$num, otherwise just name it $num
      if ( $num =~ /^[0-9]/ && defined ($label)) {
	$label =~ s/\W.*//;
	$name = "$label-$num";
      } else {
	$name = "$num";
      }
      for ($i = 0; $i < @cpucounts; $i++) {
	if ( defined ($cpucounts[$i]) ) {
	  push (@return, "p=/$main::g_host/kernel/irq/${name}/cpu${i}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$cpucounts[$i]\n");
	}
      }
    }
  }
  return (@return);
}
