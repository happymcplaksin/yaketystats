#!/usr/bin/perl

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$|=1;
use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

my (@data, $line);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "GAUGE";
my $rrd_interval;

our ($g_default_timeout, $g_host, $g_sep, $g_collector);
$main::g_host = get_hostname ();
$g_collector = "webct_monitor_log";

# PUT YOUR LOCAL VARIABLES HERE!

# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if (! defined (@ARGV) || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  $rrd_interval = 300;
  fileit ("You ran $g_collector manually; setting interval to $rrd_interval.");
  @data = doit ();
  foreach my $line (@data) {
    print "$line";
  }
  print "\n";
} else {
  if ( defined ($ARGV[0]) && $ARGV[0] =~ /^\d+$/ ) {
    $rrd_interval = $ARGV[0];
  } else {
    fileit ("Ack!  No interval for $g_collector.  Bailing.");
    exit ();
  }
  get_ignores ();
  @data = doit ();
  if ( defined ($data[0]) ) {
    bivalve (@data);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }
}
##  <log4j:event logger="VistaMonitor" timestamp="1177229306978" time="Sun Apr 22 04:08:26 EDT 2007" level="INFO" thread="VistaPooledThread-1:1">
##  <log4j:message><![CDATA[]]></log4j:message>
##  </log4j:event>
##  
##  <log4j:event logger="VistaMonitor" timestamp="1177229606936" time="Sun Apr 22 04:13:26 EDT 2007" level="INFO" thread="VistaPooledThread-0:0">
##  <log4j:message><![CDATA[
##  
##  Http Session:  Current number of open sessions: 0
##  Http Session:  High water mark of the total number of open sessions 15
##  Http Session:  Total number of sessions opened: 4837
##  
##  IFS Object Data:  Hit Ratio: 99.74%
##  IFS Object Data:  Purge Cycle Count: 0
##  IFS Folder Path:  Hit Ratio: 94.53%
##  IFS Folder Path:  Purge Count: 0
##  IFS Library Object:  Hit Ratio: 0.95%
##  IFS Library Object:  Purge Cycle Count: 0
##  IFS Writeable Connection Pool:  Current Size: 6
##  IFS Writeable Connection Pool:  Immediate Allocation Count: 43088
##  IFS Writeable Connection Pool:  Deferred Allocation Count: 0
##  IFS Writeable Connection Pool:  Failed Allocation Count: 0
##  IFS Read Only Connection Pool:  Current Size: 6
##  
##  Database:  Current number of active connections: 0
##  Database:  High water mark of active connections: 6
##  Database:  Total number of JDBC connections: 20
##  Database:  Number of leaked connections: 0
##  Database:  Averaged time necessary to get a connection (milliseconds): 138
##  Database:  Current total number waiting for a connection: 0
##  Database:  High water mark of waiters for a connection: 0
##  Database:  Number of seconds the longest waiter for a connection waited: 0
##  Database:  Number of rows in table odmz_event: 2062
##  
##  JMS:  Current connection count to this Server (dvw1): 6
##  JMS:  Peak connection count to this Server (dvw1): 6
##  JMS:  Total connection count to this Server (dvw1): 7
##  JMS Destination Counts:  current consumers, high consumers, current messages, high messages, pending messages, received messages
##   JMS: MailToolJMSServer.MailQueue:  -1,-1,-1,-1,-1,-1
##   JMS: MailToolJMSServer.MailErrorQueue:  -1,-1,-1,-1,-1,-1
##   JMS: MailToolJMSServer.ArchiveQueue:  -1,-1,-1,-1,-1,-1
##   JMS: MailToolJMSServer.RestoreQueue:  -1,-1,-1,-1,-1,-1
##   JMS: IntegrationFrameworkJMSServer.ErrorQueue:  -1,-1,-1,-1,-1,-1
##   JMS: IntegrationFrameworkJMSServer.InboundQueue:  -1,-1,-1,-1,-1,-1
##   JMS: IntegrationFrameworkJMSServer.OutboundQueue:  -1,-1,-1,-1,-1,-1
##   JMS: IntegrationFrameworkJMSServer.ErrorQueue:  -1,-1,-1,-1,-1,-1
##   JMS: ChatWBJMSServer.WebctEventTopic:  -1,-1,-1,-1,-1,-1
##  
##  XSLT Pool:  Allocated number of objects: 0,0,0,0,0,0,0,0,0,0
##  XSLT Pool:  Available (free) number of objects: 10,10,10,10,10,10,10,10,10,10
##  XSLT Pool:  High water mark of the total number of allocated objects: 1,1,1,1,1,1,1,1,1,1
##  XSLT Pool:  Low water mark of the total number of available (free) objects: 9,9,9,9,9,9,9,9,9,9
##  XSLT Pool:  Average allocated objects, per hour: 0,0,0,0,0,0,0,0,0,0
##  XSLT Pool:  Average available (free) objects, per hour: 0,0,0,0,0,0,0,0,0,0
##  
##  Admin Session Pool:  Allocated number of admin sessions: 0
##  Admin Session Pool:  Available (free) number of admin sessions: 5
##  Admin Session Pool:  High water mark of the total number of allocated admin sessions: 3
##  Admin Session Pool:  Low water mark of the total number of available (free) admin sessions: 0
##  Admin Session Pool:  Average allocated admin sessions, per hour: 113
##  Admin Session Pool:  Average available (free) admin sessions, per hour: 113
##  
##  JVM Monitor:  Heap size (bytes): 1610547200
##  JVM Monitor:  Available memory in heap (bytes): 885634888
##  
##  ChatWB:  No data detected, chat server may not running.
##  
##  Vista Application:  Threads with infinite timeout: 0
##  Vista Application:  Current number of sockets registered for socket muxing: 31
##  Vista Application:  Current number of waiting requests in the default execute queue: 0
##  Vista Application:  Current number of waiting requests in the primary execute queue: 0
##  Vista Application:  Current number of waiting requests in the diagnostics execute queue: 0
##  Vista Application:  Current total number of alive servers in this cluster: 27
##  
##  IFS Context:  Current number of user sessions in IFS Context cache: 24
##  IFS Context:  Current number of IFS LibrarySessions in IFS Context cache: 72
##  IFS Context:  High water mark of the total number of user sessions in IFS Context cache: 54
##  IFS Context:  Average number of user sessions in IFS Context cache: 37
##  
##  Pre-created Library Session Pool:  Number of pre-created library sessions: 200
##  
##  JobScheduler:  Number of jobs currently scheduled (Max) = 45(46)
##  
##  Cache Service:   Number of cache currently used: 9
##     ifs.LearningCtxt.isCourseRelated: size: 99; requests: 959; hits: 0.73%; misses: 99.27%
##     ifs.LearningCtxt.fullName: size: 99; requests: 957; hits: 2.4%; misses: 97.6%
##     EDUCATOR_TO_PERSON: size: 0; requests: 1119; hits: 99.64%; misses: 0.36%
##     DISCUSSION_MESSAGE: size: 943; requests: 2395; hits: 60.63%; misses: 39.37%
##     ifs.LearningCtxt.courseId: size: 99; requests: 934; hits: 0.0%; misses: 100.0%
##     ifs.LearningCtxt.name: size: 99; requests: 1868; hits: 45.29%; misses: 54.71%
##     ifs.LearningCtxt.templateId: size: 5; requests: 25; hits: 80.0%; misses: 20.0%
##     LEARNING_CONTEXT.ID: size: 51; requests: 215946; hits: 98.7%; misses: 1.3%
##     rdbms.Person.PersonData: size: 0; requests: 2576; hits: 38.2%; misses: 61.8%
##  
##  Guest Session Pool:  Allocated number of guest sessions: 0
##  Guest Session Pool:  Available (free) number of guest sessions: 25
##  Guest Session Pool:  High water mark of the total number of allocated guest sessions: 2
##  ]]></log4j:message>
##  </log4j:event>
##
our $g_var;
my %collectem;
sub doit {
  local *F;
  my ($node, $cluster, $line, $string, $value, @data, $status, $ts, @return);
  my $logtail = "/usr/local/bin/logtail";
  my $vistatab = "/usr/local/eas-ts/config/vistatab";

  # Which node and cluster?
  if ( ! open (F, "$vistatab") ) {
    fileit ("Can't open $vistatab: $!");
    return ();
  }
  #$g_host = "ant";
  #$logtail= "/usr/sbin/logtail";
  ($node, $cluster) = (split (/:/, (grep (/:${g_host}:/, <F>))[0]))[0,4];
  close (F);
  $node =~ s/[.].*//;
  $cluster = lc($cluster);

  # Which stats should we collect?
  read_webct_monitor_config ();

  # Read the log
  ($status, @data) = run_prg ("$logtail /u01/app/bea/${node}/weblogic*/config/${cluster}/logs/webct_monitor.log $g_var/tmp/webct_monitor.logtail",  $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status for logtail: $status.  Output was:\n@data");
    return ();
  }
  foreach $line (@data) {
    # Look for an event and record the timestamp
    if ( $line =~ /^<log4j:event/) {
      $ts = $line;
      chomp ($ts);
      $ts =~ s/.*timestamp="(\d{10}).*/$1/;
    }
    # If we're at the end of an event, record everything we've got
    #if ( $line =~ /^<\/log4j:event>/ ) {
    #  print "SO NOTED\n";
    #}
    # Otherwise, look for a special message based on config file
    # The log is small so don't try to be efficient
    foreach $string (keys (%collectem)) {
      if ( $line =~ /^$string/ ) {
	$value = $line;
	chomp ($value);
	$value =~ s/.*:\s*//g;
	# delete the stupid ^M
	$value =~ s/\r//g;
	push (@return, "p=/$main::g_host/vista/$collectem{$string}{label}/$collectem{$string}{label}${g_sep}t=$collectem{$string}{rrd_type}${g_sep}i=$rrd_interval${g_sep}ts=${ts}${g_sep}v=$value\n");
      }
    }
  }
  return (@return);
}

sub read_webct_monitor_config {
  local *F;
  my ($line, @a);
  my ($label, $string, $type);
  my $config = "$g_dir/etc/webct_monitor.config";

  if ( ! open (F, $config) ) {
    fileit ("Can't open $config: $!");
    return ();
  }
  while (<F>) {
    $line = $_;
    if ( $_ !~ /^#/ ) {
      chomp ($line);
      ($label, $type, $string) = split (/\|/, $line);
      $collectem{$string}{'label'} = $label;
      $collectem{$string}{'rrd_type'} = $type;
    }
  }
  return (@a);
}
