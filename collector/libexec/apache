#!/usr/bin/env perl

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$|=1;
use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

my (@data, $line);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "DERIVE";
my $rrd_interval;

our ($g_exit, $g_default_timeout, $g_host, $g_sep, $g_collector);
$main::g_host = get_hostname ();
$g_collector = "apache";
default_plugin_opts ();

# PUT YOUR LOCAL VARIABLES HERE!
my (%apachemap, @return);
my $time;
$time = time ();
my $my_timeout = 50;

our %econfig;
$apachemap{'_'} = "waiting";
$apachemap{'S'} = "starting";
$apachemap{'R'} = "reading";
$apachemap{'W'} = "sending";
$apachemap{'K'} = "reading_keepalive";
$apachemap{'D'} = "dns";
$apachemap{'C'} = "closing";
$apachemap{'L'} = "logging";
$apachemap{'G'} = "finishing";
$apachemap{'I'} = "idle_cleanup";
$apachemap{'.'} = "open";

# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if ( !@ARGV || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  $rrd_interval = 60;
  fileit ("You ran $g_collector manually; setting interval to $rrd_interval.");
  @data = doit ();
  foreach my $line (@data) {
    print "$line";
  }
  print "\n";
} else {
  if ( defined ($ARGV[0]) && $ARGV[0] =~ /^\d+$/ ) {
    $rrd_interval = $ARGV[0];
  } else {
    fileit ("Ack!  No interval for $g_collector.  Bailing.", "err");
    exit ();
  }
  get_ignores ();
  @data = doit ();
  if ( defined ($data[0]) ) {
    bivalve (@data);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }
}

# server-status?auto gives this:
#
# Total Accesses: 1321802
# Total kBytes: 644252
# CPULoad: 5.11306
# Uptime: 19972
# ReqPerSec: 66.1828
# BytesPerSec: 33031.9
# BytesPerReq: 499.102
# BusyWorkers: 2
# IdleWorkers: 18
# Scoreboard: _.........._....._.........._._....._................._....R..W..............._......_._..._..............._..._...__...._...._._...............................................................................................................................
#
# Legend:
# _ = waiting
# S = starting up
# R = reading req
# W = Sending Reply,
# K = Keepalive (read),
# D = DNS Lookup,
# C = Closing connection
# L = Logging
# G = Gracefully finishing
# I = Idle cleanup of worker
# . = Open slot with no current process
sub doit {
  # Read server-status?auto for most stats
  my ($status, @data, $url, $cmd, $string, $value, $char, $host);

  eval_file ("$ENV{HOME}/etc/apache.config");

  foreach $host (@{ $econfig{'apache'}{'hosts'} }) {
    $url = "https://${host}/server-status?auto";
    $cmd = "curl -k -s $url";

    ($status, @data) = run_prg ($cmd, $my_timeout);
    if ( $status != 0 ) {
      fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
      return (undef);
    }
    foreach $line (@data) {
      chomp ($line);
      if ( $line !~ /^$/ ) {
	check_one ($host, $line, "Total Accesses", "accesses/accesses", "DERIVE");
	check_one ($host, $line, "Total kBytes", "bytes/bytes", "DERIVE", 1024);
	check_one ($host, $line, "CPULoad", "cpuload/cpuload","GAUGE");
	check_one ($host, $line, "Uptime", "uptime/uptime", "GAUGE");
	check_one ($host, $line, "ReqPerSec", "reqpersec/reqpersec", "GAUGE");
	check_one ($host, $line, "BytesPerSec", "bytespersec/bytespersec", "GAUGE");
	check_one ($host, $line, "BusyWorkers", "workers/busy", "GAUGE");
	check_one ($host, $line, "IDleWorkers", "workers/idle", "GAUGE");
	if ( $line =~ /^Scoreboard/ ) {
	  $string = $line;
	  $string =~ s/^Scoreboard:\s+//;
	  foreach $char qw(_ S R W K D C L G I) {
	    $value = 0;
	    while ($string =~ /$char/g) { $value++ }
	    push (@return, "p=/${host}/apache/scoreboard/$apachemap{$char}${g_sep}t=GAUGE${g_sep}i=${rrd_interval}${g_sep}ts=${time}${g_sep}v=$value\n");
	  }
	  $value = 0;
	  while ($string =~ /[.]/g) { $value++ }
	  push (@return, "p=/${host}/apache/scoreboard/$apachemap{'.'}${g_sep}t=GAUGE${g_sep}i=${rrd_interval}${g_sep}ts=${time}${g_sep}v=$value\n");
	}
      }
    }

    # Get SSL stats
    # cache type: <b>SHMCB</b>, shared memory: <b>512000</b> bytes, current sessions: <b>608</b><br>sub-caches: <b>32</b>, indexes per sub-cache: <b>133</b><br>time left on oldest entries' SSL sessions: avg: <b>297</b> seconds, (range: 295...298)<br>index usage: <b>14%</b>, cache usage: <b>98%</b><br>total sessions stored since starting: <b>124744</b><br>total sessions expired since starting: <b>0</b><br>total (pre-expiry) sessions scrolled out of the cache: <b>124136</b><br>total retrieves since starting: <b>89</b> hit, <b>5</b> miss<br>total removes since starting: <b>0</b> hit, <b>0</b> miss<br></td></tr>
    $url = "https://${host}/server-status";
    $cmd = "curl -k -s $url";

    ($status, @data) = run_prg ($cmd, $my_timeout);
    if ( $status != 0 ) {
      fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
      return (undef);
    }
  LOOP:foreach $line (@data) {
      chomp ($line);
      if ( $line =~ /^cache type:/ ) {
	$line = chopit ($host, $line, "shared memory", "shared/bytes");
	$line = chopit ($host, $line, "current sessions", "sessions/current");
	$line = chopit ($host, $line, "sub-caches", "caches/sub");
	$line = chopit ($host, $line, "indexes per sub-cache", "caches/index_per_sub");
	$line = chopit ($host, $line, "time left on oldest entries' SSL sessions: avg", "timeleft");
	$line = chopit ($host, $line, "index usage", "pct/index");
	$line = chopit ($host, $line, "cache usage", "pct/cache");
	$line = chopit ($host, $line, "total sessions stored since starting", "sessions/total");
	$line = chopit ($host, $line, "total sessions expired since starting", "sessions/expired");
	$line = chopit ($host, $line, "sessions scrolled out of the cache", "sessions/scrolled");
	$line = chopit ($host, $line, "total retrieves since starting", "retrieves/hit");
	$value =~ s/(,|\s+miss)//;
	push (@return, "p=/${host}/apache/ssl/retrieves/miss${g_sep}t=GAUGE${g_sep}i=${rrd_interval}${g_sep}ts=${time}${g_sep}v=${value}\n");
	$line =~ s/$value//;
	$line = chopit ($host, $line, "total removes since starting", "removes/hit");
	$value =~ s/(,|\s+miss)//;
	push (@return, "p=/${host}/apache/ssl/removes/miss${g_sep}t=GAUGE${g_sep}i=${rrd_interval}${g_sep}ts=${time}${g_sep}v=${value}\n");
	last LOOP;
      }
    }
  }

  return (@return);
}

sub chopit {
  my ($host, $line, $chopto, $path) = @_;
  my ($value);

  $line =~ s/.*$chopto:\s+//;
  $line =~ s/<[^>]*>//;
  $line =~ s/<[^>]*>//;
  $value = $line;
  $value =~ s/\s.*//;
  $value =~ s/[^0-9]//g;
  $line =~ s/$value//;
  push (@return, "p=/${host}/apache/ssl/${path}${g_sep}t=GAUGE${g_sep}i=${rrd_interval}${g_sep}ts=${time}${g_sep}v=${value}\n");
  return ($line);
}

sub check_one {
  my ($host, $line, $string, $path, $type, $factor) = @_;
  my ($value);

  if ( $line =~ /^${string}: /i ) {
    $value = $line;
    $value =~ s/^.*:\s+//;
    if ( defined ($factor) ) {
      $value *= $factor;
    }
    $value = $value;
    push (@return, "p=/${host}/apache/${path}${g_sep}t=${type}${g_sep}i=${rrd_interval}${g_sep}ts=${time}${g_sep}v=${value}\n");
  }
}
