#!/usr/bin/perl

# Copyright (C) 2008 Board of Regents of the University of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$|=1;
use strict;
use warnings;
use IO::Socket;
use Fcntl ':flock'; # get LOCK_*
use Data::Dumper;
$Data::Dumper::Purity = 1;
$Data::Dumper::Deepcopy = 1;
#print Data::Dumper->Dump ( [\%config], ['*config'] );
use Getopt::Std;

# Make LANG be empty so we don't get hosed.
$ENV{'LANG'} = '';

use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

our ($g_outgoing,$g_uploads, $g_server_fqdn, $g_server_uri,
$g_server_protocol, $g_host, $g_debug, $g_debug_level, $g_default_timeout,
$g_user_agent, $opt_d, $opt_l);

$g_uploads="$g_outgoing/uploads";
my ($file,@files,@packetlist,@packets,$packet_size,$i,$packet,
    $current_packet_num, $num,%pairs, $packet_prefix, $packet_file,
    $new_file);
# Maybe just a 65-bit number would be better :)
my $biggest_ts = "99999999999999999999999999999999";
my $smallest_ts = $biggest_ts;
my $g_pusherman_version = "1.3";
my $g_maxsize = 6 * 1024 * 1024;
$packet_prefix = "iluvpackets";
$current_packet_num = $num = 0;
$g_host = get_hostname ();

# see what outgoing packets exist and record the highest number packet
handle_args ();
get_config ("client");

debug ("Looking for existing packets in $g_uploads", 50);
foreach $packet (list_dir_entries($g_uploads, "file", 1)) {
  debug ("Found $packet", 60);
  push(@packetlist,"$packet");
  $num = basename($packet);
  $num =~ s/.*[.](\d+)$/$1/;
  if ( $num > $current_packet_num ) {
    $current_packet_num = $num;
    debug ("Setting packet_file to $packet_file", 60);
    $packet_file = "$packet";
  }
}

# get an array of files
debug ("Getting list of outgoing files in $g_outgoing", 50);
foreach $file (list_dir_entries ($g_outgoing, "file", 1)) {
  debug ("Found $file", 60);
  push (@files,$file);
}

# sort it
foreach $file (sort(@files)){
  debug ("Conglomerating $file", 60);
  conglomerate($file);
}

# Catch the last straggler
if ( defined ($packet_file) ) {
  debug ("packet = $packet_file, and list is @packetlist", 60);
  if ( $packet_file =~ /[-]$biggest_ts[.]/ ) {
    debug ("found a straggler with packet_file = $packet_file", 60);
    $new_file = $packet_file;
    $new_file =~ s/[-]${biggest_ts}[.]/-${smallest_ts}./;
    if ( ! rename ($packet_file, $new_file) ) {
      fileit ("Could not rename $packet_file to $new_file.  I'm helpless!");
      return ();
    }
    $packet_file = $new_file;
  }

  if ( defined ($packet_file) && string_member ("$packet_file", @packetlist) == 0 ) {
    push(@packetlist, "$packet_file");
  }
}

# upload all packets if possible
$pairs{'host'}=$g_host;
$pairs{'dataversion'}=$g_pusherman_version;

for($i = 0; $i < @packetlist; $i += 5){
  if ( $i < (@packetlist - 1) ){
    # If post_file fails, assume further attempts will fail at this time too so skip them
    if ( post_file ("$g_server_protocol", "$g_server_fqdn", 80, "$g_server_uri",\%pairs,@packetlist[$i .. $i+4]) != 0 ){
      last;
    }
  }else{
    post_file ("$g_server_protocol", "$g_server_fqdn", 80, "$g_server_uri",\%pairs,@packetlist[$i .. (@packetlist - 1)]);
  }
}

sub conglomerate {
  my ($file) = @_;
  my ($ts, $host, $stat, $packetsize, $filesize, $new_file);
  local *F;
  local *G;

  # If we do not already have a packet file name, make one up
  if ( ! defined ($packet_file) ) {
    $packet_file = "$g_uploads/$packet_prefix-$biggest_ts.$current_packet_num";
  }

  debug ("The packet is $packet_file");
  # Does the packet file exist?
  if ( -f $packet_file ){
  debug ("The packet exists!");
    # If yes, check whether it plus $file are > max size
    $packetsize = (stat($packet_file))[7];
    $filesize   = (stat($file))[7];
    if ( ! defined ($packetsize) ||
	 ! defined ($filesize) ) {
      fileit ("Packetsize or filesize not defined.  Skipping $file.");
      return ();
    }
    # If > max size,
    if ( $packetsize + $filesize > $g_maxsize ){
      debug ("The packet is > $g_maxsize");
      # Rename the file if it was a new file
      if ( $packet_file =~ /[-]$biggest_ts[.]/ ) {
	$new_file =~ s/[-]($biggest_ts)[.]/$smallest_ts/;
	if ( ! rename ($packet_file, $new_file) ) {
	  fileit ("Could not rename $packet_file to $new_file.  I'm helpless!");
	  return ();
	}
	$packet_file = $new_file;
      }
      # And add file to list if it's not already there
      if ( string_member ($packet_file, @packetlist) == 0 ) {
	debug ("Adding packet to packetlist");
	push(@packetlist,"$packet_file");
	# Increment packet num,
	$current_packet_num++;
	# Reset ts
	$smallest_ts = $biggest_ts;
	# And create a new packet file name; it will be opened below
	$packet_file = "$g_uploads/$packet_prefix-$biggest_ts.$current_packet_num";
      }
    }
  }

  debug ("Appending to packet file");
  if (open (F,">>$packet_file")){
    if ( open (G,$file) ){
      # Looks like we are going to process $file.
      # Check the timestamp in its name
      $ts = $file;
      $ts =~ s/.*[.]//;
      if ( $ts < $smallest_ts ) {
	# Make sure it's a string so we don't get 1e+blah
	$smallest_ts = "$ts";
      }
      while(<G>){
	print F $_;
	my $hapbug = $_;
	chomp ($hapbug);
	debug ("Adding this to $packet_file: $hapbug")
      }
      close(G);
    }else{
      fileit ("Can't open $file: $!. Bailing.");
    }
    close(F);
    unlink($file);
  }else{
    fileit ("Can't open $packet_file: $!. Bailing.");
  }
}

sub post_file {
  my ($protocol, $fqdn, $port, $uri, $pair_href, @packets) = @_;

  if ($protocol ne "http") {
    fileit ("$protocol is an unsupported protocol");
    return (33);
  }
  http_post_file ($fqdn, 80, $uri, $pair_href, @packets);
}

# POST /file.php HTTP/1.1
# Host: jojo.edu
# User-Agent: Mozilla/5.0 (X11; U; Linux ppc; en-US; rv:1.7.12) Gecko/20050923 Firefox/1.0.7 (Debian package 1.0.7-1)
# Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5
# Accept-Language: en-us,en;q=0.5
# Accept-Encoding: gzip,deflate
# Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
# Keep-Alive: 300
# Connection: keep-alive
# Content-Type: multipart/form-data; boundary=---------------------------17180138192956482181596622795
# Content-Length: 88974
# -----------------------------17180138192956482181596622795
# Content-Disposition: form-data; name="MAX_FILE_SIZE"
# 
# 300000
# -----------------------------17180138192956482181596622795
# Content-Disposition: form-data; name="rtupload"; filename="ls"
# Content-Type: application/octet-stream
# 
# ELF

# Content-Length is the binary plus the length of these headers and the boundaries:
#  Content-Disposition: form-data; name="rtupload"; filename="ls"
#  Content-Type: application/octet-stream
# Plus one (for the final newline?)
sub http_post_file {
  my ($host, $port, $uri, $pref, @files) = @_;
  my ($sock, $resp, $nl, $length, $uniq, $boundary, $form_data,
      $start,$name,$fc,$file,$line,$status,$begin, %pairs);
  local *Q;

  if ( @files ) {
    debug ("Uploading @files.", 50);
  } else {
    debug ("No files to upload.", 50);
    return (0);
  }

  %pairs = %$pref;

  $nl = "\r\n";
  $sock = IO::Socket::INET->new(PeerAddr => "$host:$port",
                                Timeout => $g_default_timeout);
  if ( !defined ($sock) || !$sock ) {
    fileit ("Darn sock!  $@");
    return (8);
  }
  $uniq = "17180138192956482181596622795";
  $boundary="---------------------------$uniq";
  $boundary="iamaboundaryandthatisokbyme$uniq";

  foreach $name (keys(%pairs)){
    $form_data .= "--$boundary${nl}";
    $form_data .= "Content-Disposition: form-data; name=\"${name}\"${nl}";
    $form_data .= $nl;
    $form_data .= $pairs{$name};
    $form_data .= $nl;
  }
  $fc='';
  foreach $file (@files){
    open (Q, $file) || die "Can't open $file: $!";
    $form_data .=
                  "--$boundary${nl}" .
                  "Content-Disposition: form-data; name=\"datafile${fc}\"; filename=\"$file\"${nl}" .
                  "Content-Type: application/octet-stream${nl}" .
                  "${nl}";
      while ( <Q> ) {
        $form_data .= $_
      }
      close (Q);
      $fc++;
  }
  $form_data .= "${nl}";
  $form_data .= "--${boundary}--${nl}";
  $form_data .= "${nl}";
  $length = length ($form_data);

  # Heh, use HTTP 1.1 so name-based virtual hosts work!
  $start ="POST $uri HTTP/1.1${nl}" .
          "Host: ${host}${nl}" .
          "User-Agent: ${g_user_agent}${nl}" .
          "Connection: Close${nl}" .
          "Content-Type: multipart/form-data; boundary=$boundary${nl}" .
          "Content-Length: ${length}${nl}${nl}";

  debug ("HTTP post start: $start", 90);
  debug ("HTTP post form_data: $form_data", 90);
  print $sock "$start";
  print $sock $form_data;

  $resp = <$sock>;
  if ( ! defined ($sock) ) {
    fileit ("Ack!  No response!  Does this help:  $!");
    close ($sock);
    return (9);
  }

  if ( $resp !~ /200 OK/ ) {
    fileit ("Ack!  Bad response for $uri on $host:$port:  ${resp}.  Does this help:  $!");
    if ( $g_debug ) {
      while ( $resp = <$sock> ) {
	fileit ("Or maybe this helps: $resp");
      }
    }
    close ($sock);
    return (10);
  }else{
    #parse the text
    $begin = 0;
    debug ("Response from server:", 90);
    while (<$sock>) {
      $line = $_;
      chomp($line);
      debug ("$line", 90);
      if ( $line eq "BEGIN" || $begin == 1 ){
          $begin = 1;
          ($status,$file) = split(/\s+/,$line);
          if ( $status eq "OK" ){
	    debug ("Got OK for $file.  Deleting.", 90);
            if ( ! unlink("$g_uploads/$file") ) {
	      fileit ("Can't unlink $file: $!");
	    }
          }
          if ( $status eq "ERROR" ){
	    debug ("Got ERROR for $file.  Not deleting.", 90);
            fileit("$file reported an error.");
            close($sock);
            return (1);
          }
      }
    }
    debug ("End response from server", 90);
  }
  close ($sock);
  return (0);
}

# -d turns on debugging
# -l LEVEL sets debug level
sub handle_args {
  getopts('dl:');  # -p and -d are boolean; l takes an argument
  # Sets $opt_* as a side effect.

  if ( defined ($opt_d) ) {
    $g_debug = 1;
    debug ("Debug is ON!");
  }
  if ( defined ($opt_l) && $opt_l =~ /^\d+$/ ) {
    $g_debug_level = $opt_l;
    debug ("Debug level set to $g_debug_level");
  }
}
