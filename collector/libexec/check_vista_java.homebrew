#!/usr/bin/env perl

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

# NOTE NOTE NOTE: This doesn't quite use the template because it's a Nagios
# plugin which does stats on the side.  doit() calls bivalve directly.

$|=1;
use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

my (@data, $line);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "GAUGE";
my $rrd_interval = 1800;

our ($g_host, $g_sep, $g_collector);
$main::g_host = get_hostname ();
$g_collector = 'vista_java';
default_plugin_opts ();

my (@warning, @critical);
my $exit = 0;
my %abbr;
$abbr{'SSTATE'} = 'ServerState';
$abbr{'SCOUNT'} = 'ServerCount';
$abbr{'MMLC'} = 'MulticastLost';
$abbr{'PCOUNT'} = 'PrimaryCount';
$abbr{'DPRCC'} = 'DefaultReq';
$abbr{'PPRCC0'} = 'PrimaryReq';
$abbr{'OSCC'} = 'OpenSocket';
$abbr{'JDBCWCCC'} = 'JDBCCount';
$abbr{'JMSCC'} = 'JMSCount';
$abbr{'HFC'} = 'HeapCount';
# New in Vista 4
$abbr{'DETCIC'} = 'ThreadIdle';

# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if ( !@ARGV || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  doit ("standalone");
} else {
  get_ignores ();
  doit ();
}

sub doit {
  my ($warning, $critical, @stats);

  chdir ("/tmp");
  #maybe_fixup_mmlc ();
  @stats = java_vista ();
  if ( defined ($stats[0]) ) {
    bivalve (@stats);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }

  if ( defined ($warning[0]) ) {
    $warning = join (' ', @warning);
    $warning = expand_abbr ($warning);
    # This is a message for Nagios
    print "Warning: $warning ";
    $exit = 1;
  }
  if ( defined ($critical[0]) ) {
    $critical = join (' ', @critical);
    $critical = expand_abbr ($critical);
    # This is a message for Nagios
    print "Critical: $critical ";
    $exit = 2;
  }
  if ( $exit == 0 ) {
    # This is a message for Nagios
    print "OK";
  }
  # This is a message for Nagios
  print "\n";

  exit ($exit);
}

# If there's more than one line in /tmp/*MMLC.old then delete it.  Hack until
# Amy fixes mon_wl81.sh.
sub maybe_fixup_mmlc {
  my ($status, @data, $entry, $found, @file);

  $found = 0;
  if ( ! opendir (D, "/tmp") ) {
    # This is a message for Nagios
    print "Warning:  Can't open /tmp: $!";
    $exit = 1;
    return ();
  }
  while ( $found == 0 && ($entry = readdir (D)) ) {
    if ( $entry =~ /MMLC_old/ ) {
      $found = 1;
    }
  }
  closedir (D);

  if ( ! open (F, $entry) ) {
    # This is a message for Nagios
    print "Warning:  Can't open $entry: $!";
    $exit = 1;
    return ();
  }
  @file = <F>;
  close (F);

  $entry = "/tmp/$entry";
  if ( @file > 1 ||
       (defined ($file[0]) && $file[0] =~ /^\s+$/)) {
    unlink ($entry);
  }
}

sub java_vista {
  my ($cmd, $status, @data, @return, $path, $time, $line, $item, $name, $value,
      $prev, $exit, @stats);

  $cmd = "/usr/local/nagios/libexec/mon_wl81.sh";
  $time = time ();
  ($status, @data) = run_prg ($cmd, 120);
  if ( $status != 0 ) {
    $line = join (',', @data);
    # This is a message for Nagios
    print "Critical: Trouble running $cmd ($status).  $line\n";
    exit (2);
  } else {
    # "SSTATE:RUNNING:0 SCOUNT:2:1 MMLC:0:0:0 PCOUNT:3:0 DPRCC:0:0 PPRCC0:0 OSCC:6:0 JDBCWCCC:0:0 JMSCC:26:0 HFC:1421254456:0"
    if ( @data > 1 ) {
      # This is a message for Nagios
      print "Critical: More than one line of output from $cmd.  Help!  First line was: $data[0]";
      exit (2);
    }
    $line = $data[0];
    chomp ($line);
    foreach $item (split (/\s+/, $line)) {
      if ( $item =~ /MMLC/ ) {
        ($name, $value, $prev, $exit) = split (/:/, $item);
        if ( !defined ($name)  ||
             !defined ($value) ||
             !defined ($prev)  ||
             !defined ($exit) ) {
	  # This is a message for Nagios
          print "Critical: Not all values present.  Here's what I got: $name, $value, $prev, $exit.\n";
          exit (2);
        }
      } else {
        ($name, $value, $exit) = split (/:/, $item);
        if ( !defined ($name)  ||
             !defined ($value) ||
             !defined ($exit) ) {
	  # This is a message for Nagios
          print "Critical: Not all values present.  Here's what I got: $name, $value, $exit.\n";
          exit (2);
        }
      }
      if ( $exit eq "1" )  {
        push (@warning, $item);
      }
      if ( $exit eq "2" )  {
        push (@critical, $item);
      }
      # Hack SSTATE text into a number
      if ( $name eq "SSTATE" ) {
        if ( $value eq "RUNNING" ) {
          $value = 1;
        } else {
          $value = 0;
        }
      }
      push (@stats,
            "p=/$main::g_host/java/$name/$name${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$value\n");
    }
  }
  return (@stats);
}

sub expand_abbr {
  my ($string) = @_;
  my ($abbr, $expn);

  foreach $abbr (keys (%abbr)) {
    $string =~ s/$abbr:/$abbr{$abbr}:/g;
  }
  return ($string);
}
