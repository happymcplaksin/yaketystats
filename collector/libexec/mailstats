#!/usr/bin/env perl

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$|=1;
use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

my (@data, $line);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "GAUGE";
my $rrd_interval;

our ($g_exit, $g_default_timeout, $g_host, $g_sep, $g_collector);
$main::g_host = get_hostname ();
$g_collector = 'mailstats';
default_plugin_opts ();

# PUT YOUR LOCAL VARIABLES HERE!

# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if ( !@ARGV || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  $rrd_interval = 900;
  fileit ("You ran $g_collector manually; setting interval to $rrd_interval.");
  @data = doit ();
  foreach my $line (@data) {
    print "$line";
  }
  print "\n";
} else {
  if ( defined ($ARGV[0]) && $ARGV[0] =~ /^\d+$/ ) {
    $rrd_interval = $ARGV[0];
  } else {
    fileit ("Ack!  No interval for $g_collector.  Bailing.", "err");
    exit ();
  }
  get_ignores ();
  @data = doit ();
  if ( defined ($data[0]) ) {
    bivalve (@data);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }
}

# mailstats needs to be able to read your statistics file
#
# Columns:
# M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis msgsqur  Mailer
#
# T = total
# C = TCP connections
# mailstats -P
# 1245762542 1245763133
#  4      134       1130      135       1146        0       0       0  esmtp
#  9        6         41        0          0        0       0       0  local
#  T      140       1171      135       1146        0       0       0
#  C      135                 135                   0
#


sub doit {
  my ($status, @data, $time, @return);
  my ($cmd, %mailer, $line);
  my ($msgsfr, $bytes_from, $msgsto, $bytes_to, $msgsrej, $msgsdis, $msgsqur, $mailer);

  $time = time ();

  $cmd = "mailstats";
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status from $cmd: ${status}.  Data was:\n@data\n", "warn");
  }
  foreach $line (@data) {
    $line =~ s/^\s+//;
    chomp ($line);
    if ( $line =~ /^\s*[0-9]/ ) {
      (undef, $msgsfr, $bytes_from, $msgsto, $bytes_to, $msgsrej, $msgsdis, $msgsqur, $mailer) =
	split (/\s+/, $line);
      $bytes_from =~ s/K//;
      $bytes_to =~ s/K//;
      $bytes_from *= 1024;
      $bytes_to *= 1024;
      push (@return, "p=/$main::g_host/mailstats/msgs_from/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$msgsfr\n");
      push (@return, "p=/$main::g_host/mailstats/msgs_to/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$msgsto\n");
      push (@return, "p=/$main::g_host/mailstats/bytes_from/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$bytes_from\n");
      push (@return, "p=/$main::g_host/mailstats/bytes_to/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$bytes_to\n");
      push (@return, "p=/$main::g_host/mailstats/msgs_rejected/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$msgsrej\n");
      push (@return, "p=/$main::g_host/mailstats/msgs_quarantined/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$msgsqur\n");
      push (@return, "p=/$main::g_host/mailstats/msgs_discarded/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$msgsdis\n");
    } else {
      if ( $line =~ /^\s*C/ ) {
	(undef, $msgsfr, $msgsto) = split (/\s+/, $line);
	push (@return, "p=/$main::g_host/mailstats/outbound_tcp_conns/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$msgsto\n");
	push (@return, "p=/$main::g_host/mailstats/inbound_tcp_conns/${mailer}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$msgsfr\n");
      }
    }
  }
  return (@return);
}
