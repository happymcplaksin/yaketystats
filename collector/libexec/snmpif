#!/usr/bin/env perl

# TODO:
# - Allow ignores by various things
# - Allow hostname(s) to be listed via config file
# - Make it a real (v2.1) plugin
# - Make it a 2.2 plugin too
# - Um the hack that translates bla-vc[0-9]* to bla-con :)
# - Can we make bla-vc-con be a float IP so we don't have to get the 2 vs not-2 thing right?

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$|=1;
use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

use Net::SNMP;
my (@data, $line);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "DERIVE";
my $rrd_interval;

our ($g_exit, $g_default_timeout, $g_host, $g_sep, $g_collector);
$main::g_host = get_hostname ();
$g_collector = 'snmpif';
default_plugin_opts ();

# PUT YOUR LOCAL VARIABLES HERE!
our %econfig;
my (%oid);
$oid{'ifIndex'}	  = '.1.3.6.1.2.1.2.2.1.1';
$oid{'ifDescr'}         = '.1.3.6.1.2.1.2.2.1.2';
$oid{'ifAdminStatus'}	  = '.1.3.6.1.2.1.2.2.1.7';
$oid{'ifSpeed'}	  = '.1.3.6.1.2.1.2.2.1.5';
$oid{'ifOperStatus'}	  = '.1.3.6.1.2.1.2.2.1.8';
$oid{'ifInOctets'}	  = '.1.3.6.1.2.1.2.2.1.10';
$oid{'ifInUcastPkts'}	  = '.1.3.6.1.2.1.2.2.1.11';
$oid{'ifInNUcastPkts'}  = '.1.3.6.1.2.1.2.2.1.12';
$oid{'ifInDiscards'}	  = '.1.3.6.1.2.1.2.2.1.13';
$oid{'ifInErrors'}	  = '.1.3.6.1.2.1.2.2.1.14';
$oid{'ifOutOctets'}	  = '.1.3.6.1.2.1.2.2.1.16';
$oid{'ifOutUcastPkts'}  = '.1.3.6.1.2.1.2.2.1.17';
$oid{'ifOutNUcastPkts'} = '.1.3.6.1.2.1.2.2.1.18';
$oid{'ifOutDiscards'}	  = '.1.3.6.1.2.1.2.2.1.19';
$oid{'ifOutErrors'}	  = '.1.3.6.1.2.1.2.2.1.20';


# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if ( !@ARGV || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  $rrd_interval = 300;
  fileit ("You ran $g_collector manually; setting interval to $rrd_interval.");
  @data = doit ();
  foreach my $line (@data) {
    print "$line";
  }
  print "\n";
} else {
  if ( defined ($ARGV[0]) && $ARGV[0] =~ /^\d+$/ ) {
    $rrd_interval = $ARGV[0];
  } else {
    fileit ("Ack!  No interval for $g_collector.  Bailing.", "err");
    exit ();
  }
  get_ignores ();
  @data = doit ();
  if ( defined ($data[0]) ) {
    bivalve (@data);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }
}

sub doit {
  my ($session, $error, @values, $omega, $index, @stats, $stat, $name, $value, $host);
  my ($time, @return);

  $time = time ();

  eval_file ("$ENV{HOME}/etc/snmpif.config");

  @stats = qw(ifSpeed ifInOctets ifInUcastPkts ifInNUcastPkts ifInDiscards ifInErrors ifOutOctets ifOutUcastPkts ifOutNUcastPkts ifOutDiscards ifOutErrors);

  foreach $host (@{ $econfig{'hosts'} }) {
    print "host = $host\n";
    ($session, $error) = Net::SNMP->session (
					     -hostname => $host,
					     -version => '2c',
					     -community => 'public'
					    );
    if ( ! $session ) {
      print "Bad: $error\n";
      exit (1);
    }

    $omega = walkem ($session, qw(ifIndex ifAdminStatus ifDescr ifSpeed ifOperStatus ifInOctets ifInUcastPkts ifInNUcastPkts ifInDiscards ifInErrors ifOutOctets ifOutUcastPkts ifOutNUcastPkts ifOutDiscards ifOutErrors));
    #print Data::Dumper->Dump ( [\%$omega], ['*omega'] );

    foreach $index (keys (%{ $$omega{'ifIndex'} })) {
      if ( $$omega{'ifAdminStatus'}{$index} == 1 && $$omega{'ifOperStatus'}{$index} == 1 ) {
	$name = $$omega{'ifDescr'}{$index};
	foreach $stat (@stats) {
	  $value = $$omega{$stat}{$index};
	  if ( $stat =~ /octet/i ) {
	    $value *= 8;
	  }
	  if ( $value != 0 ) {
	    $host =~ s/-vc[0-9]*//;
	    push (@return, "p=/$host/snmpif/$name/$stat${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$value\n");
	  }
	}
      }
    }
    $session->close();
  }
  return (@return);
}

sub walkem {
  my ($session, @oidnames) = @_;
  my ($h1, $h2, $h3, $k, $sk, $oid);

  $h3 = {};
  foreach $oid (@oidnames) {
    $h1 = $session->get_table(-baseoid => $oid{$oid});
    $h2 = {};
    foreach $k (keys (%$h1)) {
      $sk = $k;
      $sk =~ s/.*[.]//;
      $$h2{$sk} = $$h1{$k};
    }
    $$h3{$oid} = $h2;
  }
  return ($h3);
}
