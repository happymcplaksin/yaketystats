#!/usr/bin/perl

# Copyright (C) 2008 Board of Regents of the University of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

# NOTE:  This is full of bogusosity!  It was a proof-of-concept.

$|=1;
use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

my (@data, $line);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "GAUGE";
my $rrd_interval;

our ($g_exit, $g_default_timeout, $g_host, $g_sep, $g_collector);
$main::g_host = get_hostname ();
$g_collector = "esx_server";

# PUT YOUR LOCAL VARIABLES HERE!
my ($nagios_msg, $nagios_status, %regexp, $perf_script, $username, $password);
my $config = "/usr/local/yaketystats/etc/esx.conf";

if ( $ARGV[2] ne "" ) {
  $main::g_host = $ARGV[2];
} else {
  tell_nagios ($main::g_host, 2, "Need a hostname");
}

# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if (! defined (@ARGV) || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  $rrd_interval = 300;
  fileit ("You ran $g_collector manually; setting interval to $rrd_interval.");
  @data = doit ();
  foreach my $line (@data) {
    print "$line";
  }
  print "\n";
} else {
  if ( defined ($ARGV[0]) && $ARGV[0] =~ /^\d+$/ ) {
    $rrd_interval = $ARGV[0];
  } else {
    fileit ("Ack!  No interval for $g_collector.  Bailing.");
    exit ();
  }
  get_ignores ();
  @data = doit ();
  if ( defined ($data[0]) ) {
    bivalve (@data);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }
  tell_nagios ($main::g_host, 0, "OK")
}

sub doit {
  my ($cmd, $status, @data, $line, $regexp, $value, @return, $time,
      $multiplier, $path);

  $time = time ();
  read_config ($config);
  $cmd = "$perf_script --username $username --password $password --server $main::g_host";
  ($status, @data) = run_prg ($cmd, 30);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    tell_nagios ($main::g_host, 2,
		 "Can't get perf data; host probably down.  (TODO:  Improve this)");
  }
  foreach $line (@data) {
    chomp ($line);
    foreach $regexp (keys %regexp) {
      if ( $line =~ /$regexp/ ) {
	$value = (split (/$regexp/, $line))[1];
	$value =~ s/[\sA-ZA-z]//g;
	$path = @{ $regexp{$regexp} }[0];
	$multiplier = @{ $regexp{$regexp} }[1];
	$value *= $multiplier;
	push (@return, "p=/$main::g_host/$g_collector/${path}${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$value\n");
      }
    }
  }
  return (@return);
}

sub read_config {
  my ($config) = @_;
  my ($line, $regexp, $path, $multiplier);
  local *G;

  if ( ! open (G, $config) ) {
    tell_nagios ($main::g_host, 2, "Can't open config ($config)");
  }
 LOOP:
  while ( <G> ) {
    $line = $_;
    chomp ($line);
    if ( $line =~ /^#/ || $line eq "" ) {
      next LOOP;
    }
    if ( $line =~ /^PROGRAM/ ) {
      $perf_script = $line;
      $perf_script =~ s/^PROGRAM\s*//;
    } else {
      if ( $line =~ /^USERNAME/ ) {
	$username = $line;
	$username =~ s/^USERNAME\s*//;
      } else {
	if ( $line =~ /^PASSWORD/ ) {
	  $password = $line;
	  $password =~ s/^PASSWORD\s*//;
	} else {
	  ($regexp, $path, $multiplier) = split (/--\|\|--/, $line);
	  $regexp{$regexp} = [$path, $multiplier];
	}
      }
    }
  }
  close (G);
}

# tell_nagios ($g_collector, $nagios_status, $nagios_msg);
# $nagios_status = 2;
# $nagios_msg = "CRITICAL: Can't fetch $base_url";
# 
# PROGRAM: /usr/local/share/doc/vmware-viperl/samples/performance/utilization_report.pl
