#!/usr/bin/env perl

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$|=1;

use strict;
use warnings;
use Cwd 'realpath';
our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

my (@data, $line);

# These are the defaults.  They could be semi-overridden by specifying a
# different interval in the client config file, but the RRD file would still have
# space for updates every $interval as defined below.
my $rrd_type = "GAUGE";
my $rrd_interval;

our ($g_os, $g_default_timeout, $g_host, $g_sep, $g_collector);
$main::g_host = get_hostname ();
$main::g_collector = "disk";
default_plugin_opts ();

# If we haven't loaded subs.pl, then we've been run from the command-line.  That
# means we're in test mode.  So load include, define $g_host, and print results.
if ( !@ARGV || (! defined ($ARGV[1]) && $ARGV[1] eq "calledfromcollect") ) {
  # TODO: There must be a better way to get this path!  I think the better
  # way is called "perl module" :)
  local $main::g_fileit_mode = "test";
  # Silence warning
  $main::g_fileit_mode = $main::g_fileit_mode;
  get_ignores ();
  $rrd_interval = 300;
  fileit ("You ran $g_collector manually; setting interval to $rrd_interval.");
  @data = doit ();
  foreach my $line (@data) {
    print "$line";
  }
  print "\n";
} else {
  if ( defined ($ARGV[0]) && $ARGV[0] =~ /^\d+$/ ) {
    $rrd_interval = $ARGV[0];
  } else {
    fileit ("Ack!  No interval for $g_collector.  Bailing.", "err");
    exit ();
  }
  get_ignores ();
  @data = doit ();
  if ( defined ($data[0]) ) {
    bivalve (@data);
  } else {
    fileit ("Warning:  No data for $g_collector");
  }
}

## PATH="/bin:/usr/bin:/usr/local/bin:/usr/contrib/bin"
## 
## OS=`uname -s`
## if [ "$OS" = Linux ]
## then
##   GETFSES="/bin/mount | awk '{if ( \$1 ~ /\/dev/) { print \$3; }}'"
## else
##   GETFSES="/usr/sbin/mount | awk '{if ( \$3 ~ /\/dev/) { print \$1; }}'"
## fi
## 
## list=`eval $GETFSES | sort`
sub doit {
  my ($cmd, $status, @data, $line, @return, $time, $dev_col, $fs_col, %fses,
      $dev, $fs, $size, $used, $avail, $pct, $i_col, $i_used);

  $time = time ();
  $cmd = 'mount';
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    return (undef);
  }

  # Get the list of filesystems (logic based on our get_filesystems plugin
  # for Nagios/NRPE)
  foreach $line (@data) {
    # For Linux,
    if ( $g_os eq "linux" ) {
      ##   GETFSES="/bin/mount | awk '{if ( \$1 ~ /\/dev/) { print \$3; }}'"
      $dev_col = 0;
      $fs_col = 2;
    } else {
      # HP-UX and Solaris are the same.  Shocker!
      if ( $g_os eq "hpux" || $g_os eq "solaris" ) {
        ##   GETFSES="/usr/sbin/mount | awk '{if ( \$3 ~ /\/dev/) { print \$1; }}'"
        $dev_col = 2;
        $fs_col = 0;
      }
    }
    ($dev, $fs) = (split (/\s+/, $line))[$dev_col, $fs_col];
    if ( $dev =~ /\/dev/ ) {
      $fses{$fs} = 1;
    }
  }

  $cmd = 'df';
  if ( $g_os eq "hpux" ) {
    $cmd = "b${cmd}";
  }
  if ( $g_os eq "solaris" ) {
    $cmd = "$cmd -k -F ufs";
  } else {
    $cmd = "$cmd -l";
  }

  ## TODO:  It would be nicer to run df just once on HP-UX.
  ## First, regular df..
  ## HP-UX:
  ## Filesystem          kbytes    used   avail %used Mounted on
  ## /dev/vg00/lvol3     143360   78247   61105   56% /
  ## /dev/vg00/lvol1      83733   32780   42579   43% /stand
  ##
  ## Solaris:
  ## Filesystem            kbytes    used   avail capacity  Mounted on
  ## /dev/md/dsk/d30      2058319   79732 1916838     4%    /
  ## /dev/md/dsk/d33      4133838  958009 3134491    24%    /usr
  ##
  ## Linux:
  ## Filesystem           1K-blocks      Used Available Use% Mounted on
  ## /dev/hda7             10241084   7407824   2833260  73% /
  ## tmpfs                   258292         0    258292   0% /dev/shm
  ## /dev/hda8             10681480   6000836   4138052  60% /stable
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    return (undef);
  }
  @data = unwrap (@data);

  foreach $line (@data) {
    ($dev, $size, $used, $avail, $pct, $fs) = split (/\s+/, $line);

    if ( $dev =~ /\/dev/ &&
	 defined ($fses{$fs}) &&
	 !ignoreit ('disk', $fs)
       ) {
      debug ("fs = $fs");
      $fs = renamefs ($fs);
      $pct =~ s/%//;
      # Convert from k to bytes
      $size *= 1024;
      $used *= 1024;
      $avail *= 1024;
      push (@return,
            "p=/$main::g_host/disk/size/$fs${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$size\n");
      push (@return,
            "p=/$main::g_host/disk/used/$fs${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$used\n");
    }
  }

  ## Next, df for inodes
  ## HP-UX:
  ## Filesystem          kbytes    used   avail %used  iused  ifree %iuse Mounted on
  ## /dev/vg00/lvol3     143360   78247   61105   56%   2602  16278   14% /
  ## /dev/vg00/lvol1      83733   32780   42579   43%     65  13375    0% /stand
  ## /dev/vg00/lvol8    9318400 5882268 3333320   64%  23206 429514    5% /var
  ##
  ## Solaris
  ## Filesystem             iused   ifree  %iused  Mounted on
  ## /dev/md/dsk/d30         7239  331449     2%   /
  ## /dev/md/dsk/d33        23695  475633     5%   /usr
  ##
  ## Linux:
  ## Filesystem            Inodes   IUsed   IFree IUse% Mounted on
  ## /dev/hda7                  0       0       0    -  /
  ## tmpfs                  64573       2   64571    1% /dev/shm
  ## /dev/hda8            1357216   56254 1300962    5% /stable
  ##
  if ( $g_os eq "linux" ) {
    $cmd = "$cmd -i";
    $i_col = 4;
    $fs_col = 5;
  }
  if ( $g_os eq "solaris" ) {
    $cmd = "$cmd -o i";
    $i_col = 3;
    $fs_col = 4;
  }
  if ( $g_os eq "hpux" ) {
    $cmd = "$cmd -i";
    $i_col = 7;
    $fs_col = 8;
  }
  ($status, @data) = run_prg ($cmd, $g_default_timeout);
  # Solaris df -o i is stupid so check for 1024 too
  if ( $status != 0 ) {
    fileit ("Bad status for $cmd:  $status.  Output was:  @data\n");
    return (undef);
  }
  @data = unwrap (@data);
  foreach $line (@data) {
    ($i_used, $fs) = (split (/\s+/, $line))[$i_col, $fs_col];
    if ( $fs =~ /^\// ) {
      $i_used =~ s/%//;
      # Linux returns - for %iuse for reiserfs filesystems (which can't run out
      # of inodes
      if ( defined ($fses{$fs}) &&
	   $i_used ne "-" &&
	   !ignoreit ('disk', $fs)
	 ) {
	$fs = renamefs ($fs);
	push (@return,
	      "p=/$main::g_host/disk/inodes/$fs${g_sep}t=$rrd_type${g_sep}i=$rrd_interval${g_sep}ts=$time${g_sep}v=$i_used\n");
      }
    }
  }
  return (@return);
}
