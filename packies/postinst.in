#!/bin/sh

# post-install for stats
#
# - figure out FQDN
# - add logcheck entries
# - install default crontab
# - install default config file


NAME=yaketystats
OUR_USER=stats
OUR_GROUP=stats
OUR_GID=TBDGID
OUR_UID=TBDUID
DEBIAN_VERSION="/etc/debian_version"

CHROOT=""
ROOTDIR=/
uname=`uname`

if [ "$uname" = SunOS ]
  then
  if [ ! -z "${PKG_INSTALL_ROOT}"  ]
    then
    ROOTDIR="${PKG_INSTALL_ROOT}/"
    CHROOT="/usr/sbin/chroot ${ROOTDIR}"
  fi
fi

if [ "$uname" = Linux ]; then
  CP=$ROOTDIR/bin/cp
  SU=$ROOTDIR/bin/su
  GREP=$ROOTDIR/bin/grep
  CAT=$ROOTDIR/bin/cat
  CHMOD=$ROOTDIR/bin/chmod
  CHOWN=$ROOTDIR/bin/chown
  MKDIR=$ROOTDIR/bin/mkdir
  CRONTAB_ALLOW=$ROOTDIR/etc/cron.d/cron.allow
  CRONTAB_DENY=$ROOTDIR/etc/cron.d/cron.deny
  if [ -f $DEBIAN_VERSION ]; then
    DEBIAN=1
  fi
else
  CP=$ROOTDIR/usr/bin/cp
  SU=$ROOTDIR/usr/bin/su
  GREP=$ROOTDIR/usr/bin/grep
  CAT=$ROOTDIR/usr/bin/cat
  CHMOD=$ROOTDIR/usr/bin/chmod
  CHOWN=$ROOTDIR/usr/bin/chown
  MKDIR=$ROOTDIR/usr/bin/mkdir
  if [ "$uname" = "SunOS" ]; then
    CRONTAB_ALLOW=$ROOTDIR/etc/cron.d/cron.allow
    CRONTAB_DENY=$ROOTDIR/etc/cron.d/cron.deny
  else
  # Assume HP-UX
    CRONTAB_ALLOW=$ROOTDIR/var/adm/cron/cron.allow
    CRONTAB_DENY=$ROOTDIR/var/adm/cron/cron.deny
  fi
fi

MYHOME=$ROOTDIR/usr/local/$NAME

if [ -f /etc/redhat-release ]
then
  CRONTAB_FILE="$ROOTDIR/var/spool/cron/$OUR_USER"
else
  CRONTAB_FILE="$ROOTDIR/var/spool/cron/crontabs/$OUR_USER"
fi
# These are used after chroot
CRONTAB="/usr/bin/crontab"
DEFAULT_CRONTAB="/usr/local/$NAME/etc/crontab"

# If the crontab looks like it has our stuff in it, do nothing
$GREP collect $CRONTAB_FILE > /dev/null 2>&1

if [ $? != 0 ]; then
  # - If cron.allow exists, make sure stats is in it. That's all.
  if [ -f $CRONTAB_ALLOW ]; then
    $GREP $OUR_USER $CRONTAB_ALLOW > /dev/null
    if [ $? != 0 ]; then
      echo $OUR_USER >> $CRONTAB_ALLOW
    fi
  else
    # - If cron.deny exists and cron.allow does not exist, make sure
    #   stats is not in cron.deny. That's all.
    if [ -f $CRONTAB_DENY ]; then
      $GREP $OUR_USER $CRONTAB_DENY > /dev/null
      if [ $? = 0 ]; then
        echo "Ack!  $OUR_USER is explicitly denied access to cron.  Bailing."
        exit 7
      fi
    fi
  fi
  $CHROOT $SU $OUR_USER -c "$CRONTAB $DEFAULT_CRONTAB"
fi

# For Solaris, put 'NP' into stats' password field in /etc/shadow
if [ "$uname" = SunOS ]
then
  $GREP "^$OUR_USER:" $ROOTDIR/etc/shadow > /dev/null
  if [ $? != 0 ]
  then
    echo "Gack!  $OUR_USER is not in $ROOTDIR/etc/shadow.  I am helpless!"
    exit 4
  fi
  $GREP "^$OUR_USER:NP:" $ROOTDIR/etc/shadow > /dev/null
  if [ $? != 0 ]
  then
    OUMASK=`umask`
    umask 077
    TMP="$ROOTDIR/var/$NAME/tmp/shadow"
    SHADOW="$ROOTDIR/etc/shadow"
    echo "Hmm, bad-looking password field for $OUR_USER in $SHADOW.  Making it be 'NP'"
    cp $SHADOW $TMP.bk
    if [ $? != 0 ]
    then
      echo "Ack!  Backup of $SHADOW failed.  Bailing."
      rm -f $TMP*
      exit 6
    fi
    sed "s/^$OUR_USER:[^:]*:/$OUR_USER:NP:/" $SHADOW > $TMP
    if [ $? != 0 ]
    then
      echo "Ack!  sed failed.  Bailing."
      rm -f $TMP*
      exit 5
    fi
    cp $TMP $SHADOW
    if [ $? != 0 ]
    then
      echo "Ack ack ack!  Copying $TMP to $SHADOW failed!!  HELP!!  Orig shadow file is $TMP.bk.  Bailing."
      rm -f $TMP*
      exit 7
    fi
    rm -f $TMP*
    umask $OUMASK
  fi
fi

exit 0
