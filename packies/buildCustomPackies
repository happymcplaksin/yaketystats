#!/usr/bin/env bash

# Copyright (C) 2008 Board of Regents of the University of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

if [[ $BASH_VERSINFO != '3' ]]
then
    echo "Bash 3 required, sorry."
    exit 3
fi

TXT_BOLD=`tput bold`
TXT_RED=`tput setaf 1`
TXT_GREEN=`tput setaf 2`
TXT_YLW=`tput setaf 3`
TXT_BLUE=`tput setaf 4`
TXT_PURPLE=`tput setaf 5`
TXT_CYAN=`tput setaf 6`
TXT_WHITE=`tput setaf 7`
TXT_RESET=`tput sgr0`

myOS=`uname`
alien=''

function verify(){
    local file="$1"
    if [[ ! -f $file ]]
    then
        echo "Can't find $file"
        exit 4
    fi
}

checkit(){
    if [[ $? != 0 ]]
    then
        echo "$1: So sorry.  Bailing"
        exit 4
    fi
}


case $myOS in
    Linux)
        packie=RPM
        verify /usr/bin/rpmbuild
        if [[ -f /etc/debian_version ]]
        then
            alien=/usr/bin/alien  # if $alien is not null, we're on a debian-based distro
            verify $alien
        fi
        function myhost(){
            /usr/bin/getent hosts $1 | awk '{print $1}'
        }
    ;;
    SunOS)
        packie=PKG
        verify /usr/bin/pkgmk
        verify /usr/bin/pkgproto
        function myhost(){
            /bin/getent hosts $1 | awk '{print $1}'
        }
    ;;
    "HP-UX")
        packie=DEPOT
        verify /usr/sbin/swpackage
        function myhost(){
            /usr/contrib/bin/nsquery $1 | grep Address | awk '{print $2}'
        }
    ;;
esac


function ask(){
    # we r sysadmins!
    q="$1"
    v="$2"
    sv=${!v}
    echo -n "${q} [${sv}]:"
    read uv
    if [[ -z "${uv}" ]]
        then
        if [[ -z "${sv}" ]]
            then
            ask "$q" "$v"
        fi
        uv="${sv}"
    fi
    uv="`echo $uv | tr [A-Z] [a-z]`"
    case $uv in
        "yes"|"bam")
            uv='y'
            ;;
        "no")
            uv='n'
            ;;
        default)
            ;;
    esac
    report="${report}${q}: ${TXT_GREEN}${v}=${uv}${TXT_RESET}\n"
    myenv="${v}=${uv}\n${myenv}"
    eval "`echo ${v}`=${uv}"
}

# Yowza!  In bash > 3.1 if you quote the right-hand argument to =~
# then you get plain old string matching instead of regexp matching.
#
# This seems to mean that removing the quotes will make it work with all
# versions of bash which support =~.
#
# Alternately if you're running bash > 3.1 and want to quote the right-hand
# side, shopt -s compat31
function parseurl(){
    if [[ "${serverurl}" =~ ^http://.*/store.php ]]
    then
        local nobangequalstilde='whynot?'
    else
        echo "    Your URL seems funny."
        serverurl="http://${serverfqdn}/store.php"
        ask "    Enter the URL to store.php" serverurl
        parseurl $serverurl
    fi
}

function allPrep(){
    [[ "${allPrepRan}" = 1 ]] && return
    allPrepRan=1
    cd $me
    sed -e "s|SERVER-URL|${serverurl}|" ../collector/etc/client.conf.in > ../collector/etc/client.conf
    sed -e "s|INBOUND|${inbound}|" \
        -e "s|ROLLED|${rolled}|" \
        -e "s|RRDDIR|${rrddir}|" ../stuffer/etc/server.conf.in > ../stuffer/etc/server.conf
    rm -f ${me}/{depot,pkg,rpm}build.log
}

function cleanUp(){
    [[ "${cleanUpRan}" = 1 ]] && return
    cleanUpRan=1
    cd $me
}

function rpmPrep(){
    cd $me
    cp ../COPYING ../collector
    cp ../COPYING ../stuffer
    mkdir -p redhat/{RPMS/noarch,SOURCES,SRPMS/noarch,SPECS,TMP,BUILD}
    cd ../collector
    tar czf ../packies/redhat/SOURCES/yaketystats-client-${version}.tar.gz .
    checkit "client tar"
    cd ../stuffer
    tar czf ../packies/redhat/SOURCES/yaketystats-server-${version}.tar.gz .
    checkit "server tar"
}

# use settings from last time? (with confirm)
#for redhat:
## fix the scripts (testing left)
### preinst needs TBDUID and TBDGID
### postinst TBDUID TBDGID
## put the scripts in the packies
## fix comproll to read the config file

function buildRPM(){
    echo "Building ${1}"
    clientspec="redhat/SPECS/yaketystats-${1}.spec"
    template="${1}.spec.template"
    rpmPrep
    cd $me
    sed -e "s/TBDGID/${statsgid}/" \
        -e "s/TBDUID/${statsuid}/" \
      preinst.in > preinst
    sed -e "s/TBDGID/${statsgid}/" \
        -e "s/TBDUID/${statsuid}/" \
      postinst.in > postinst
    sed -e "s/RELEASE/${release}/" \
        -e "s/VERSION/${version}/" \
        -e '/^%pre$/ r preinst' \
        -e '/^%post$/ r postinst' \
        -e '/^%postun$/ r postrm' \
      ${template} > ${clientspec}
    checkit "${clientspec} sed"
    rpmbuild --define "_topdir ${me}/redhat" -ba --target noarch ${clientspec} >> ${me}/rpmbuild.log 2>&1
    checkit "rpmbuild of ${clientspec}"
    find redhat/RPMS/noarch -name \*${1}\*
}

function buildPKG(){
    echo "Building ${1}"
    dir="solaris/${1}"
    mkdir -p ${dir}

    #depend
    if [[ ${1} == "server" ]]
    then
        echo "P yaketystats-client >= $version" > ${dir}/depend
        name="../../../stuffer"
        varstuff=''
    else
        name="../../../collector"
        varstuff="d none /var/yaketystats 0775 stats stats\nd none /var/yaketystats/incoming 0775 stats stats\nd none /var/yaketystats/locks 0775 stats stats\nd none /var/yaketystats/outgoing 0775 stats stats\nd none /var/yaketystats/outgoing/uploads 0775 stats stats\nd none /var/yaketystats/tmp 0775 stats stats\n"
    fi
    #copyright
    cp ${me}/../COPYING ${dir}/copyright
    #pkginfo
    sed -e "s/SORC/${1}/" -e "s/=VERSION/=${version}/" pkginfo.in > ${dir}/pkginfo
    # prototype
    cp prototype.in ${dir}/prototype
    if [[ ${1} == "server" ]]
    then
        echo "i depend" >> ${dir}/prototype
    else
        #package scripts
        ## preinstall
        sed -e "s/TBDGID/${statsgid}/" \
            -e "s/TBDUID/${statsuid}/" \
          preinst.in > ${dir}/preinstall
        echo "i preinstall" >> ${dir}/prototype
        ## postinstall
        sed -e "s/TBDGID/${statsgid}/" \
            -e "s/TBDUID/${statsuid}/" \
          postinst.in > ${dir}/postinstall
        echo "i postinstall" >> ${dir}/prototype
        ## preremove
        ## postremove
        cp postrm ${dir}/postremove
        echo "i postremove" >> ${dir}/prototype
        ##checkinstall
    fi
    cd ${dir}
    # find | pkgproto >> prototype
    # and fix ownership in prototype
    find ${name} -name var -prune -o -print |\
                  pkgproto "${name}=/usr/local/yaketystats" |\
                  sed -e 's/^\([^ ]* [^ ]* [^ ]* [^ ]*\) [^ ]* [^ ]*$/\1 root root/' >> prototype
    echo -e ${varstuff} >> prototype
    # pkgmk
    pkgmk -o -d ../ -a all >> ${me}/pkgbuild.log 2>&1
    # pkgtrans -s 
    cd ..
    pkgtrans -s . yaketystats-${1}-${version}-SunOS`uname -r`-all.pkg yaketystats-${1} >> ${me}/pkgbuild.log 2>&1
    cd $me
    find solaris/ -name yaketystats-${1}\*
}

function buildDEPOT(){
    if [[ $1 == "server" ]]
    then
        return
    fi
    echo "Building combo product"

    cd ${me}
    cp HPUX.RAMsize ../collector/bin
    mkdir -p hp-ux
    cd hp-ux
    find ../../stuffer | sed 's/^..\/..\/stuffer\/*//' | xargs -i echo "file " {} > stufferfiles
    find ../../collector | sed 's/^..\/..\/collector\/*//' | xargs -i echo "file " {} > collector

    sed -e "s/TBDGID/${statsgid}/" \
        -e "s/TBDUID/${statsuid}/" \
      ../preinst.in > preinst
    sed -e "s/TBDGID/${statsgid}/" \
        -e "s/TBDUID/${statsuid}/" \
      ../postinst.in > postinst

    sed -e "s/VERSION/${version}/" \
        -e "s:MEDIR:${me}:" \
        -e "s/TBDGID/${statsgid}/" \
        -e "s/TBDUID/${statsuid}/" \
      ../psf.in > yaketystats.psf

    # sample: swpackage -s yaketystats.psf -d /tmp/blah -x run_as_superuser=false 
    swpackage -s yaketystats.psf -x media_type=tape -d ${me}/hp-ux/YaketyStats.depot -x run_as_superuser=false >> ${me}/depotbuild.log 2>&1
    swpackage -s yaketystats.psf -d ${me}/hp-ux/YaketyStats -x run_as_superuser=false >> ${me}/depotbuild.log 2>&1
    ls -d ${me}/hp-ux/YaketyStats*
}

function client(){
    allPrep
    build${packie} client
    # if debian?
}
function server(){
    allPrep
    build${packie} server
    # if debian?
}
function both(){
    client
    server
}

me=`pwd`
domain="`grep domain /etc/resolv.conf | awk '{print $2}'`"
dontask=${dontask:-"n"}
[[ -z "$domain" ]] && domain="example.com"
if [[ -f env ]]
then
    echo "Hey, I found an env file that looks like this:"
    echo
    cat env
    ask "Want me to use it for answers?" dontask
fi

if [[ "${dontask}" = "y" ]]
then
    echo "${TXT_GREEN}Ok then.${TXT_RESET}"
    . ./env
else
    packielist=${packielist:-"both"}
    version=${version:-"2.0"}
    serverfqdn=${serverfqdn:-"stats.${domain}"}
    serverurl=${serverurl:-"http://${serverfqdn}/store.php"}
    makevirthost=${makevirthost:-"n"}
    serveradmin="stats@${domain}"
    statsuid=${statsuid:-"11994"}
    verify='y'


    if [[ ${myOS} == "HP-UX" ]]
    then
        echo "Running this script on HP-UX builds a depot with both"
        echo "the client and the server as filesets of a product."
        packielist="both"
        myenv="packielist=both\n${myenv}"
    else
        ask "What packages are you making? (server|client|both)" packielist
        if [[ "${packielist}" != 'client' && \
              "${packielist}" != 'server' && \
              "${packielist}" != 'both' ]]
        then
            echo "Malfunction, bro!"
            exit 44
        fi
    fi
    ask "What version number do you want this/these package(s) to have?" version
    if [[ "${myOS}" = 'Linux' ]]
    then
        release=${release:-"1"}
        ask "What version of the RPM?" release
    fi
    ask "What do you want the stats user's UID to be?" statsuid
    statsgid=${statsgid:-"${statsuid}"}
    ask "What do you want the stats user's GID to be?" statsgid

    ask "Enter the URL to store.php (HTTP:80 only right now)" serverurl
    parseurl $serverurl
    serverfqdn=${serverurl#http://}
    serverfqdn=${serverfqdn%%/*}
    myenv="serverfqdn=${serverfqdn}\n${myenv}"

    # down here so that serverfqdn is maybe possibly more optimum
    documentroot=${documentroot:-"/var/www/${serverfqdn}/htdocs"}
    logdir=${logdir:-"/var/www/${serverfqdn}/logs"}
    inbound=${inbound:-"/var/www/${serverfqdn}/inbound"}
    rolled=${rolled:-"/var/www/${serverfqdn}/rolled"}
    rrddir=${rrddir:-"/rrd"}

    if [[ "${packielist}" = 'both' || "${packielist}" = "server" ]]
    then
        ask "Do you want this script to generate a virtual host file?" makevirthost
        if [[ "$makevirthost" = 'y' ]]
        then
            requesturi=${serverurl#http://$serverfqdn}
            serverip=`myhost ${serverfqdn}`
            ask "What's the server's IP address?" serverip
            ask "What's the DocumentRoot?" documentroot
            ask "Path for log directory?" logdir
            ask "What's your server admin mail address?" serveradmin
        fi
        ask "Inbound stat directory" inbound
        ask "Rolled stats direcotry" rolled
        ask "RRD files directory" rrddir
    fi


    # Report
    echo -e "\n\n${TXT_YLW}You can set these as environment variables.${TXT_RESET}\n\n$report"
    ask "looks good?" verify
    if [[ "${verify}" != 'y' ]]
    then
        echo "${TXT_RED}Ok then.${TXT_RESET}"
        exit 4
    fi
    echo -e "${myenv}" > env
fi #dontask
sleep 3

if [[ "$makevirthost" = 'y' ]]
then
    template=virthost.template
    if [[ ! -f "${template}" ]]
    then
        echo "I can't find my template file. Please put it in . for me and re-run."
        exit 4
    fi
    if [[ -f "${serverfqdn}.conf" ]]
    then
        ask "${serverfqdn}.conf exists, overwrite?" verify
    fi
    sed -e "s|SERVERIP|$serverip|g" -e "s|SERVERNAME|$serverfqdn|g" -e "s|SERVERADMIN|$serveradmin|g" \
        -e "s|DOCUMENTROOT|$documentroot|g" -e "s|REQUESTURI|$requesturi|g" -e "s|LOGDIR|$logdir|g" \
        $template > ${serverfqdn}.conf
    checkit "virthost sed"
    echo "Find your virthost file in ${serverfqdn}.conf"
    sleep 2
fi

$packielist
cleanUp
