#!/usr/bin/env bash

# if jart
# where should jart live?
# admins
# fontpath
# htaccess file!

# build the packies
## function for server, client and both calls the other two
## those, in turn, call os-specific ones
### redhat
#### build a spec file
#### run rpmbuild

TXT_BOLD=`tput bold`
TXT_RED=`tput setaf 1`
TXT_GREEN=`tput setaf 2`
TXT_YLW=`tput setaf 3`
TXT_BLUE=`tput setaf 4`
TXT_PURPLE=`tput setaf 5`
TXT_CYAN=`tput setaf 6`
TXT_WHITE=`tput setaf 7`
TXT_RESET=`tput sgr0`

myOS=`uname`
alien=''

function verify(){
    local file="$1"
    if [[ ! -f $file ]]
    then
        echo "Can't find $file"
        exit 4
    fi
}

checkit(){
    if [[ $? != 0 ]]
    then
        echo "$1: So sorry.  Bailing"
        exit 4
    fi
}


case $myOS in
    Linux)
        packie=RPM
        verify /usr/bin/rpmbuild
        if [[ -f /etc/debian_version ]]
        then
            alien=/usr/bin/alien  # if $alien is not null, we're on a debian-based distro
            verify $alien
        fi
        function myhost(){
            /usr/bin/getent hosts $1 | awk '{print $1}'
        }
    ;;
    SunOS)
        packie=PKG
        verify /usr/bin/pkgmk
        verify /usr/bin/pkgproto
        function myhost(){
            /bin/getent hosts $1 | awk '{print $1}'
        }
    ;;
    "HP-UX")
        packie=DEPOT
        verify /usr/sbin/swpackage
        function myhost(){
            /usr/contrib/bin/nsquery $1 | grep Address | awk '{print $2}'
        }
    ;;
esac


function ask(){
    # we r sysadmins!
    q="$1"
    v="$2"
    sv=${!v}
    echo -n "${q} [${sv}]:"
    read uv
    if [[ -z "${uv}" ]]
        then
        if [[ -z "${sv}" ]]
            then
            ask "$q" "$v"
        fi
        uv="${sv}"
    fi
    uv="`echo $uv | tr [A-Z] [a-z]`"
    case $uv in
        "yes"|"bam")
            uv='y'
            ;;
        "no")
            uv='n'
            ;;
        default)
            ;;
    esac
    report="${report}${q}: ${TXT_GREEN}${v}=${uv}${TXT_RESET}\n"
    myenv="${myenv}${v}=${uv}\n"
    eval "`echo ${v}`=${uv}"
}

function parseurl(){
    if [[ "${serverurl}" =~ "^http://.*/store.php" ]]
    then
        local nobangequalstilde='whynot?'
    else
        echo "    Your URL seems funny."
        serverurl="http://${serverfqdn}/store.php"
        ask "    Enter the URL to store.php" serverurl
        parseurl $serverurl
    fi
}

function allPrep(){
    [[ "${allPrepRan}" = 1 ]] && return
    allPrepRan=1
    cd $me
    cp ../collector/etc/client.conf .
    sed -e "s|SERVER-URL|${serverurl}|" client.conf > ../collector/etc/client.conf
    cp ../stuffer/etc/server.conf .
    # we're goint to make store.php look for ./mainte...
    sed -e "s|INBOUND|${inbound}|" \
        -e "s|ROLLED|${rolled}|" \
        -e "s|RRDDIR|${rrddir}|" server.conf > ../stuffer/etc/server.conf
}

function cleanUp(){
    [[ "${cleanUpRan}" = 1 ]] && return
    cleanUpRan=1
    cd $me
    cp client.conf ../collector/etc/
    cp server.conf ../stuffer/etc/
}

function rpmPrep(){
    cd $me
    mkdir -p redhat/{RPMS/noarch,SOURCES,SRPMS/noarch,SPECS,TMP,BUILD}
    cd ../collector
    tar czf ../packies/redhat/SOURCES/yaketystats-client-${version}.tar.gz .
    checkit "client tar"
    cd ../stuffer
    tar czf ../packies/redhat/SOURCES/yaketystats-server-${version}.tar.gz .
    checkit "server tar"
}

# use settings from last time? (with confirm)
#for redhat:
## fix the scripts (testing left)
### preinst needs TBDUID and TBDGID
### postinst TBDUID TBDGID
## put the scripts in the packies
## fix comproll to read the config file

function buildRPM(){
    echo "Building ${1}"
    clientspec="redhat/SPECS/yaketystats-${1}.spec"
    template="${1}.spec.template"
    rpmPrep
    cd $me
    sed -e "s/RELEASE/${release}/" -e "s/VERSION/${version}/" ${template} > ${clientspec}
    checkit "${clientspec} sed"
    rpmbuild --define "_topdir ${me}/redhat" -ba ${clientspec}
    checkit "rpmbuild of ${clientspec}"
}

function client(){
    allPrep
    build${packie} client
}
function server(){
    allPrep
    build${packie} server
}
function both(){
    client
    server
}

me=`pwd`
domain="`grep domain /etc/resolv.conf | awk '{print $2}'`"
dontask=${dontask:-"n"}
[[ -z "$domain" ]] && domain="example.com"
if [[ -f env ]]
then
    echo "Hey, I found an env file that looks like this:"
    echo
    cat env
    ask "Want me to use it for answers?" dontask
fi

if [[ "${dontask}" = "y" ]]
then
    echo "${TXT_GREEN}Ok then.${TXT_RESET}"
    . env
else
    packielist=${packielist:-"both"}
    version=${version:-"2.0"}
    serverfqdn=${serverfqdn:-"stats.${domain}"}
    serverurl=${serverurl:-"http://${serverfqdn}/store.php"}
    makevirthost=${makevirthost:-"n"}
    serveradmin="stats@${domain}"
    statsuid=${statsuid:-"11994"}
    verify='y'


    ask "What packages are you making? (server|client|both)" packielist
    if [[ "${packielist}" != 'client' && \
          "${packielist}" != 'server' && \
          "${packielist}" != 'both' ]]
    then
        echo "Malfunction, bro!"
        exit 44
    fi
    ask "What version number do you want this/these package(s) to have?" version
    if [[ "${myOS}" = 'Linux' ]]
    then
        release=${release:-"1"}
        ask "What version of the RPM?" release
    fi
    ask "What do you want the stats user's UID to be?" statsuid
    statsgid=${statsgid:-"${statsuid}"}
    ask "What do you want the stats user's GID to be?" statsgid

    ask "Enter the URL to store.php (HTTP:80 only right now)" serverurl
    parseurl $serverurl
    serverfqdn=${serverurl#http://}
    serverfqdn=${serverfqdn%%/*}

    # down here so that serverfqdn is maybe possibly more optimum
    documentroot=${documentroot:-"/var/www/${serverfqdn}/htdocs"}
    logdir=${logdir:-"/var/www/${serverfqdn}/logs"}
    inbound=${inbound:-"/var/www/${serverfqdn}/inbound"}
    rolled=${rolled:-"/var/www/${serverfqdn}/rolled"}
    rrddir=${rrddir:-"/rrd"}

    if [[ "${packielist}" = 'both' || "${packielist}" = "server" ]]
    then
        ask "Do you want this script to generate a virtual host file?" makevirthost
        if [[ "$makevirthost" = 'y' ]]
        then
            requesturi=${serverurl#http://$serverfqdn}
            serverip=`myhost ${serverfqdn}`
            ask "What's the server's IP address?" serverip
            ask "What's the DocumentRoot?" documentroot
            ask "Path for log directory?" logdir
            ask "What's your server admin mail address?" serveradmin
        fi
        ask "Inbound stat directory" inbound
        ask "Rolled stats direcotry" rolled
        ask "RRD files directory" rrddir
    fi


    # Report
    echo -e "\n\n${TXT_YLW}You can set these as environment variables.${TXT_RESET}\n\n$report"
    ask "looks good?" verify
    if [[ "${verify}" != 'y' ]]
    then
        echo "${TXT_RED}Ok then.${TXT_RESET}"
        exit 4
    fi
    echo -e "${myenv}" > env
fi #dontask
sleep 3

if [[ "$makevirthost" = 'y' ]]
then
    template=virthost.template
    if [[ ! -f "${template}" ]]
    then
        echo "I can't find my template file. Please put it in . for me and re-run."
        exit 4
    fi
    if [[ -f "${serverfqdn}.conf" ]]
    then
        ask "${serverfqdn}.conf exists, overwrite?" verify
    fi
    sed -e "s|SERVERIP|$serverip|g" -e "s|SERVERNAME|$serverfqdn|g" -e "s|SERVERADMIN|$serveradmin|g" \
        -e "s|DOCUMENTROOT|$documentroot|g" -e "s|REQUESTURI|$requesturi|g" -e "s|LOGDIR|$logdir|g" \
        $template > ${serverfqdn}.conf
    checkit "virthost sed"
    echo "Find your virthost file in ${serverfqdn}.conf"
    sleep 2
fi

$packielist
cleanUp
