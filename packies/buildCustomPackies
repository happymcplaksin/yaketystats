#!/usr/bin/env bash

# if jart
# where should jart live?
# admins
# fontpath
# htaccess file!

# build the packies
## function for server, client and both calls the other two
## those, in turn, call os-specific ones
### redhat
#### build a spec file
#### run rpmbuild

TXT_BOLD=`tput bold`
TXT_RED=`tput setaf 1`
TXT_GREEN=`tput setaf 2`
TXT_YLW=`tput setaf 3`
TXT_BLUE=`tput setaf 4`
TXT_PURPLE=`tput setaf 5`
TXT_CYAN=`tput setaf 6`
TXT_WHITE=`tput setaf 7`
TXT_RESET=`tput sgr0`

myOS=`uname`
alien=''

function verify(){
    local file="$1"
    if [[ ! -f $file ]]
    then
        echo "Can't find $file"
        exit 4
    fi
}

case $myOS in
    Linux)
        verify /usr/bin/rpmbuild
        if [[ -f /etc/debian_version ]]
        then
            alien=/usr/bin/alien  # if $alien is not null, we're on a debian-based distro
            verify $alien
        fi
        function myhost(){
            /usr/bin/getent hosts $1 | awk '{print $1}'
        }
    ;;
    SunOS)
        verify /usr/bin/pkgmk
        verify /usr/bin/pkgproto
        function myhost(){
            /bin/getent hosts $1 | awk '{print $1}'
        }
    ;;
    "HP-UX")
        verify /usr/sbin/swpackage
        function myhost(){
            /usr/contrib/bin/nsquery $1 | grep Address | awk '{print $2}'
        }
    ;;
esac


function ask(){
    # we r sysadmins!
    q="$1"
    v="$2"
    sv=${!v}
    echo -n "${q} [${sv}]:"
    read uv
    if [[ -z "${uv}" ]]
        then
        if [[ -z "${sv}" ]]
            then
            ask "$q" "$v"
        fi
        uv="${sv}"
    fi
    uv="`echo $uv | tr [A-Z] [a-z]`"
    case $uv in
        "yes"|"bam")
            uv='y'
            ;;
        "no")
            uv='n'
            ;;
        default)
            ;;
    esac
    report="${report}${q}: ${TXT_GREEN}${v}=${uv}${TXT_RESET}\n"
    eval "`echo ${v}`=${uv}"
}

function parseurl(){
    if [[ "${serverurl}" =~ "^http://.*/store.php" ]]
    then
        local nobangequalstilde='whynot?'
    else
        echo "    Your URL seems funny."
        serverurl="http://${serverfqdn}/store.php"
        ask "    Enter the URL to store.php" serverurl
        parseurl $serverurl
    fi
}

function rpmPrep(){
    mkdir -p redhat/{RPMS,SOURCES,SRPMS,SPECS}
}

function buildClientRPM(){
    rpmPrep
    cd ../collector
    tar czf ../packies/redhat/SOURCES/client-${version}.tar.gz .
    cd $me
}

function buildServerRPM(){
    rpmPrep
    cd ../stuffer
    tar czf ../packies/redhat/SOURCES/server-${version}.tar.gz .
    cd $me
}

echo "ask for the stats uid and gid"
echo "ask for the release # if redhat"
exit 65

me=`pwd`
domain="`grep domain /etc/resolv.conf | awk '{print $2}'`"
[[ -z "$domain" ]] && domain="example.com"

packielist=${packielist:-"both"}
version=${version:-"2.0"}
serverfqdn=${serverfqdn:-"stats.${domain}"}
makevirthost=${makevirthost:-"n"}
serveradmin="stats@${domain}"
verify='y'


ask "What packages are you making? (server|client|both)" packielist
ask "What version number do you want this/these package(s) to have?" version
serverurl=${serverurl:-"http://${serverfqdn}/store.php"}
ask "Enter the URL to store.php (HTTP:80 only right now)" serverurl
parseurl $serverurl
serverfqdn=${serverurl#http://}
serverfqdn=${serverfqdn%%/*}

# down here so that serverfqdn is maybe possibly more optimum
documentroot=${documentroot:-"/var/www/${serverfqdn}/htdocs"}
logdir=${logdir:-"/var/www/${serverfqdn}/logs"}
inbound=${inbound:-"/var/www/${serverfqdn}/inbound"}
rolled=${rolled:-"/var/www/${serverfqdn}/rolled"}
rrddir=${rrddir:-"/rrd"}

if [ "${packielist}" = 'both' -o "${packielist}" = "server" ]
then
    ask "Do you want this script to generate a virtual host file?" makevirthost
    if [ "$makevirthost" = 'y' ]
    then
        requesturi=${serverurl#http://$serverfqdn}
        serverip=`myhost ${serverfqdn}`
        ask "What's the server's IP address?" serverip
        ask "What's the DocumentRoot?" documentroot
        ask "Path for log directory?" logdir
        ask "What's your server admin mail address?" serveradmin
    fi
    ask "Inbound stat directory" inbound
    ask "Rolled stats direcotry" rolled
    ask "RRD files directory" rrddir
fi
echo -e "\n\nYou can set these as environment variables.\n\n$report"
ask "looks good?" verify
if [ "${verify}" != 'y' ]
then
    echo "${TXT_RED}Ok then.${TXT_RESET}"
    exit 4
fi

if [[ "$makevirthost" = 'y' ]]
then
    template=virthost.template
    if [[ ! -f "${template}" ]]
    then
        echo "I can't find my template file. Please put it in . for me and re-run."
        exit 4
    fi
    if [[ -f "${serverfqdn}.conf" ]]
    then
        ask "${serverfqdn}.conf exists, overwrite?" verify
    fi
    sed -e "s|SERVERIP|$serverip|g" -e "s|SERVERNAME|$serverfqdn|g" -e "s|SERVERADMIN|$serveradmin|g" \
        -e "s|DOCUMENTROOT|$documentroot|g" -e "s|REQUESTURI|$requesturi|g" -e "s|LOGDIR|$logdir|g" \
        $template > ${serverfqdn}.conf
    echo "Find your virthost file in ${serverfqdn}.conf"
fi
