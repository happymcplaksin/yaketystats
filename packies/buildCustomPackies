#!/usr/bin/env bash

# fqdn or URL of the server
#     prefix /store.php
#     virthost stanza
#       means looking up the IP of the FQDN or URL
#       DocumentRoot
#       logRoot (and maybe lognames)
# inbound_dir /www/SERVER-FQDN/logs/yaketystats
# rolled_dir  /www/SERVER-FQDN/logs/yaketystats.rolled
# maint /www/SERVER-FQDN/maintenance
# rrddir /rrd
# what packages do you want? server/client/jart?
# what's the package version?

# if jart
# where should jart live?
# admins
# fontpath
# htaccess file!

# ask some questions
# verify the sanity of some answers.
# show a report of answers with a you're stupid verify
# build the packies
# build the virthost file if necessary

myOS=`uname`
alien=''

function verify(){
    local file="$1"
    if [[ ! -f $file ]]
    then
        echo "Can't find $file"
        exit 4
    fi
}

case $myOS in
    Linux)
        verify /usr/bin/rpmbuild
        if [[ -f /etc/debian_version ]]
        then
            alien=/usr/bin/alien  # if $alien is not null, we're on a debian-based distro
            verify $alien
        fi
    ;;
    SunOS)
        verify /usr/bin/pkgmk
        verify /usr/bin/pkgproto
    ;;
    "HP-UX")
        verify /usr/sbin/swpackage
    ;;
esac


function ask(){
    # we r sysadmins!
    q="$1"
    v="$2"
    sv=${!v}
    echo -n "${q} [${sv}]:"
    read uv
    if [[ -z "${uv}" ]]
        then
        if [[ -z "${sv}" ]]
            then
            ask "$q" "$v"
        fi
        uv="${sv}"
    fi
    uv="`echo $uv | tr [A-Z] [a-z]`"
    case $uv in
        "yes"|"bam")
            uv='y'
            ;;
        "no")
            uv='n'
            ;;
        default)
            ;;
    esac
    report="${report}${q}: ${v}=${uv}\n"
    eval "`echo ${v}`=${uv}"
}

function parseurl(){
    if [[ "${serverurl}" =~ "^http://${serverfqdn}.*/store.php" ]]
    then
        local nobangequalstilde='whynot?'
    else
        echo "    Your URL seems funny."
        serverurl="http://${serverfqdn}/store.php"
        ask "    Enter the URL to store.php" serverurl
        parseurl $serverurl
    fi
}

domain="`grep domain /etc/resolv.conf | awk '{print $2}'`"
[[ -z "$domain" ]] && domain="example.com"

packielist=${packielist:-"both"}
version=${version:-"2.0"}
serverfqdn=${serverurl:-"stats.${domain}"}
serverurl=${serverurl:-"http://${serverfqdn}/store.php"}
makevirthost=${makevirthost:-"n"}
verify='y'


ask "What packages are you making? (server|client|both)" packielist
ask "What version number do you want this/these package(s) to have?" version
ask "What is the FQDN of your stats server:" serverfqdn
ask "Enter the URL to store.php (http only right now)" serverurl
parseurl $serverurl

# down here so that serverfqdn is maybe possibly more optimum
documentroot=${documentroot:-"/var/www/${serverfqdn}/htdocs"}
logdir=${logdir:-"/var/www/${serverfqdn}/logs"}
inbound=${inbound:-"/var/www/${serverfqdn}/inbound"}
rolled=${rolled:-"/var/www/${serverfqdn}/rolled"}
rrddir=${rrddir:-"/rrd"}

if [ "${packielist}" = 'both' -o "${packielist}" = "server" ]
then
    ask "Do you want this script to generate a virtual host file?" makevirthost
    if [ "$makevirthost" = 'y' ]
    then
        ask "What's the DocumentRoot?" documentroot
        ask "Path for log directory?" logdir
    fi
    ask "Inbound stat directory" inbound
    ask "Rolled stats direcotry" rolled
    ask "RRD files directory" rrddir
fi
echo -e "\n\nYou can set these as environment variables.\n\n$report"
ask "looks good?" verify
if [ "${verify}" != 'y' ]
then
    echo "Ok then."
    exit 4
fi
