#!/usr/bin/perl

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

$| = 1;

use warnings;
use strict;

require "$ENV{'HOME'}/lib/include";
my $debug = 0;

my $machines_file = "$ENV{'HOME'}/etc/status.machines";
my ($group, $host, %status, $load1, $load15);

open (F, "$machines_file") || die "no $machines_file: $!";
my @config = <F>;
eval "@config";
if ( $@ ) {
  print "Eval error:  $@\n";
  exit 3;
}
close (F);

my $statsdir = "/rrd";

foreach $group (reverse (sort (keys (%status))) ) {
  print "--$group--\n";
  foreach $host (@{ $status{$group} } ) {
    $debug && print "Working on $host.\n";
    $load1 =  get_data ("$statsdir/$host/load/1-minute.rrd");
    $load15 =  get_data ("$statsdir/$host/load/15-minute.rrd");
    if ( $load1 eq "-" ) {
      $load1 = "   -";
    } else {
      $load1 = sprintf ("%.2f", $load1);
    }
    if ( $load15 eq "-" ) {
      $load15 = "   -";
    } else {
      $load15 = sprintf ("%.2f", $load15);
    }
    $host = substr ($host, 0, 16);
    printf "%-16s  $load1 $load15\n", $host;
  }
  print "\n";
}

my ($sec, $min, $hour) = (localtime ())[0, 1, 2];
printf "          %2d:%02d:%02d\n", $hour, $min, $sec;

# Get the most recent data point out of $rrd
sub get_data {
  my ($rrd) = @_;
  my ($status, @data, $line, $latest);

  # If we don't collect data for this item, return -
  if ( ! -f $rrd ) {
    return ("-");
  }

  ($status, @data) =
    run_prg ("/usr/bin/rrdtool fetch $rrd MAX -r 60 -s now-3600 -e now", 60);
  if ( $status == 0 ) {
    #print "status = $status, data = @data.\n";
    foreach $line (@data) {
      chomp ($line);
      if ( $line =~ /[0-9]+:  [0-9]/ ) {
        $latest = $line;
        $latest =~ s/^\s*[0-9]+: //;
        #print "Set latest to $latest\n";
      }
    }
  }
  # if for some reason we've missed it, return - (later re-use previous value)
  if ( ! defined ($latest) ) {
    return ("-");
  }
  return ($latest);
}
