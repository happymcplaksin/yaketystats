#!/usr/bin/env perl

# Copyright (C) 2008 Board of Regents of the University System of Georgia

# This file is part of YaketyStats (see http://yaketystats.org/).
#
# YaketyStats is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# YaketyStats is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with YaketyStats.  If not, see <http://www.gnu.org/licenses/>.

# Turn Munin RRDs into YaketyStats RRDs.

# todo: get plugin list from datafile and maybe don't need config file (but
# what about names?)
$|=1;

print "TODO:\nFix 'I/O' label.\nFix files named '.rrd'\n\n";exit;

use strict;
use warnings;
use RRDs;
use Cwd 'realpath';
use Fcntl ':mode';
use Getopt::Long qw(:config bundling);
use Data::Dumper;
$Data::Dumper::Purity = 1;
$Data::Dumper::Deepcopy = 1;

our $g_dir = __FILE__;
$g_dir =~ s/\/[^\/]+$//;
$g_dir = realpath("$g_dir/..");
require "$g_dir/lib/include";

our ($g_rrddir, %host4host, $g_host4host_file, $g_server_config,
     $g_default_timeout, $g_debug);
my ($config_file, $munin_rrds, $dry_run, $help, $use_munin_labels,
    %config, %labels, @script, $munin_datafile, $munin_datafile_override,
    %plugins, %hostnames);
#$config_file = "../etc/munin2ys.config";
$use_munin_labels=1;

config ();
#read_munin_config ($config_file);
read_munin_datafile ($munin_datafile);
create_commands ($munin_rrds);
run_commands ();

sub run_commands {
  my ($command, $status, @data);

  foreach $command (@script) {
    if ( $dry_run ) {
      print "dry-run: $command\n";
    } else {
      print "Running $command\n";
      ($status, @data) = run_prg ($command, $g_default_timeout);
      if ( $status != 0 ) {
	print "Problem: $!  Pressing on.\n";
      }
    }
  }
}

sub create_commands {
  my ($dir) = @_;

  my (@files, $file, $tmp, $plugin, $short_plugin, $hostname, $ok, $p,
      $path, $script, $topdir, $h);

  @files = list_dir_entries($dir, "file", 0, 1);
   OUTER: foreach $file (@files) {
    if ( $file !~ /[.]rrd$/ ) {
      next OUTER;
    }
    $topdir = $file;
    $topdir =~ s/^${dir}\///;
    $topdir =~ s/(^[^\/]*)\/.*/$1/;
    print "file=$file, topdir=$topdir\n";

    $file =~ s/^${topdir}\///;
    $ok = 0;
    $file = basename ($file);
    $tmp = $file;
    # old
    #$hostname = basename ($file);
    #debug2 ("hostname = $hostname");
    #$hostname =~ s/(^[^-]*)-.*/$1/;
    # find hostname
    debug2 ("file = $file");
    HOSTNAME: foreach $h (sort {length ($b) <=> length ($a) } keys %hostnames) {
      if ( $file =~ /^${h}/ ) {
	$hostname = $h;
	last HOSTNAME;
      }
    }
    debug2 ("hostname = $hostname");
    $tmp =~ s/^${hostname}-//;
    # Sort by length so, eg, df_inode gets found properly instead of df
    INNER: foreach $p (sort {length ($b) <=> length ($a) } keys %plugins) {
      if ( $tmp =~ /^${p}-/ ) {
	$plugin = $p;
	$ok = 1;
	last INNER;
      }
    }
    if ( $ok != 1 ) {
      print "Can't find plugin for $tmp.  Skipping.\n\n";
      next OUTER;
    }
    debug2 ("file = $file.");
    #my $re = "$config{$plugin}{'match'}.rrd";
    my $re = "^$plugin-(.*)-[a-z].rrd\$";
    debug2 ("comparing $tmp to");
    debug2 ("         $re");
    if ( $tmp !~ /$re/ ) {
      print "Gack!  No match!\n";
    } else {
      my $important = $1;
      if ( !defined ($important) ) {
	print "Failed to find important part.  Skipping.\n";
	next OUTER;
      }
      debug2 ("Important part for $plugin is $important");
      if ( defined ($labels{$plugin}) ) {
	if ( defined ($labels{$plugin}{$hostname}{$important}) ) {
	  $important = "$labels{$plugin}{$hostname}{$important}";
	} else {
	  print "Can't find $important in \$labels{$plugin}.  Skipping.\n";
	  next OUTER;
	}
      }
      $path = "$plugin/${important}";
      debug2 ("So name the new file: $path.");
      push (@script, "mkdir -p " . dirname ("${g_rrddir}/${hostname}/${path}") . "\n");
      push (@script, "rrdtool dump ${dir}/${topdir}/${file} | sed 's#<name> 42 </name>#<name> yabba </name>#' > /tmp/munin2ys.tmp && rrdtool restore /tmp/munin2ys.tmp ${g_rrddir}/${hostname}/${path}.rrd\n\n");
    }
    debug2 ("");
  }
}

# localdomain;localhost.localdomain:irqstats.iNMI.label NMI
sub read_munin_datafile {
  local *F;
  my ($status, @data, $line, $in, $out, $plugin, $hostname);

  if ( !open (F, $munin_datafile) ) {
    print "Can't open $munin_datafile: $!  Death.\n";
    exit (6);
  }

  LOOP: while (<F>) {
    $line = $_;
    chomp ($line);

    if ( $line =~ /^(version|tmpldir|htmldir|dbdir|rundir|logdir)/ ) {
      next LOOP;
    }
    # Get the hostname
    $line =~ s/^.*;//;
    $hostname = $line;
    $hostname =~ s/:.*//;
    # Store the hostname
    $hostnames{$hostname} = 1;
    $line =~ s/^${hostname}://;
    # Get the plugin name
    $plugin = $line;
    $plugin =~ s/(^[^.]*)[.].*/$1/;
    # Store plugin name
    $plugins{$plugin} = 1;
    $line =~ s/^${plugin}.//;

    if ( $line =~ /[.]label / ) {
      # iNMI.label NMI
      ($in, $out) = (split (/[. ]/, $line))[0,2];
      $out =~ s/:/_/g;
      $labels{$plugin}{$hostname}{$in} = $out;
    }
  }
}

# TODO:  DELETE!
# Written before I discovered Munin's datafile and wrote read_munin_datafile
sub read_munin_config {
  my ($config_file) = @_;

  local *F;
  my ($line, $plugin, $match, $path, $findlabel);

  if ( ! open (F, $config_file) ) {
    print "Can't open $config_file: $!  Death.\n";
    exit (1);
  }
  while ( <F> ) {
    $line = $_;
    chomp ($line);
    if ( $line !~ /^$/ && $line !~ /^#/ ) {
      ($plugin, $match, $path, $findlabel) = split (/\s+/, $line);
      debug2 ("Adding plugin: $plugin\n");
      $config{$plugin}{'match'} = $match;
      $config{$plugin}{'path'} = $path;
      if ( defined ($findlabel) ) {
	$config{$plugin}{'findlabel'} = 1;
      }
    }
  }
  close (F);
}

sub config {
  get_config("server");
  if ( !GetOptions (
		    "debug" => \$g_debug,
		    "dry-run" => \$dry_run,
		    "munin-datafile=s" => \$munin_datafile_override,
		    "munin-rrd-dir=s" => \$munin_rrds,
		    "output-rrd-dir=s" => \$g_rrddir,
#		    "use-munin-labels" => \$use_munin_labels,
		    "help" => \$help
		   ) ) {
    print "Trouble w/ options.  Feed me, Seymour\n";
    exit (1);
  }
  if ( $help ) {
    usage ();
  }
  if ( !defined ($munin_rrds) ) {
    print "--munin-rrd-dir is required.\n";
    usage ();
  }
  $munin_datafile = "${munin_rrds}/../datafile";
  if ( defined ($munin_datafile_override) ) {
    $munin_datafile = $munin_datafile_override;
  }
}

sub debug2 {
  my ($s) = @_;

  if ( $g_debug ) {
    print STDERR "$s\n";
  }
}

sub usage {
  print "$0: Create YaketyStats RRD files from Munin RRD files.\n";
  print "    You must supply --munin-rrd-dir\n";
  print "\n";
  print "List of arguments:\n";
  print "--debug                         Print debug info to stderr\n";
  print "--dry-run                       Echo rrdtool commands instead of running them\n";
  print "--munin-datafile=FILE           Use FILE instead of MUNIN-RRD-DIR/../datafile\n";
  print "--munin-rrd-dir=DIR             Directory containing Munin RRD files\n";
  print "--output-rrd-dir=DIR            Write YaketyStats RRD files to DIR instead of ${g_rrddir}/munin\n";
#  print "--no-use-munin-labels           Don't Munin labels when naming RRD files\n";
  exit (0);
}
